window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"atrax": {"fullname": "atrax", "modulename": "atrax", "kind": "module", "doc": "<p></p>\n"}, "atrax.Atrax": {"fullname": "atrax.Atrax", "modulename": "atrax", "qualname": "Atrax", "kind": "class", "doc": "<p></p>\n"}, "atrax.Atrax.Series": {"fullname": "atrax.Atrax.Series", "modulename": "atrax", "qualname": "Atrax.Series", "kind": "class", "doc": "<p></p>\n"}, "atrax.Atrax.DataSet": {"fullname": "atrax.Atrax.DataSet", "modulename": "atrax", "qualname": "Atrax.DataSet", "kind": "class", "doc": "<p></p>\n"}, "atrax.Atrax.qcut": {"fullname": "atrax.Atrax.qcut", "modulename": "atrax", "qualname": "Atrax.qcut", "kind": "function", "doc": "<p>Quantile-based discretization function.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>values: list or array-like, the input values to be discretized.</li>\n<li>q: int, number of quantiles to create (default is 4).</li>\n<li>labels: list of labels for the quantiles (optional).</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A list of quantile labels corresponding to the input values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.cut": {"fullname": "atrax.Atrax.cut", "modulename": "atrax", "qualname": "Atrax.cut", "kind": "function", "doc": "<p>Bin values into equal-width intervals.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>values : (array-like) The input values to be cut.\nbins : int or sequence of scalars, optional\n    If an int, defines the number of equal-width bins in the range of values.\n    If a sequence, defines the bin edges.\nlabels : array-like, optional\n    Labels for the bins. If None, integer labels are used.\nprecision : int, optional\n    Number of decimal places to round the bin edges.\ntie_breaker : {'upper', 'lower'}, optional\n    Determines how to handle values that fall exactly on the bin edges.\n    'upper' assigns them to the upper bin, 'lower' assigns them to the lower bin.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>binned_values : array-like\n    The binned values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;low&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;medium&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;high&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">[&#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">age_bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">age_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;young&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;middle-ages&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;senior&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">ages</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">age_bins</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">age_labels</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;young&#39;, &#39;middle-ages&#39;, &#39;middle-ages&#39;, &#39;middle-ages&#39;, &#39;senior&#39;, &#39;senior&#39;, &#39;senior&#39;, &#39;senior]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sales</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binned_sales</span> <span class=\"o\">=</span> <span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">sales</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binned_sales</span>\n<span class=\"go\">[0, 0, 1, 1, 2, 2, 3, 3]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cholesterol</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">risk_bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">risk_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Low&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moderate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;High&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">cholesterol</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">risk_bins</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">risk_labels</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;Low&#39;, &#39;Low&#39;, &#39;Low&#39;, &#39;High&#39;, &#39;High&#39;, &#39;High]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.to_datetime": {"fullname": "atrax.Atrax.to_datetime", "modulename": "atrax", "qualname": "Atrax.to_datetime", "kind": "function", "doc": "<p>Convert a string or list of strings to datetime objects.</p>\n\n<p>Parameters:\n    value (str | list[str]): The string or list of strings to convert.\n    fmt (str): Optional format string for parsing.</p>\n\n<p>Returns:\n    datetime | list[datetime]: A single datetime object if a string is provided,\n                                or a list of datetime objects if a list is provided.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2023, 10, 1, 0, 0)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">([</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-10-02&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "atrax.Atrax.date_range": {"fullname": "atrax.Atrax.date_range", "modulename": "atrax", "qualname": "Atrax.date_range", "kind": "function", "doc": "<p>Generate a list of datetime values.</p>\n\n<p>Parameters:\n    start (str | datetime): Start date.\n    end (str | datetime): End date Required is 'periods' is not specified.\n    periods (int): Number of periods to generate. Required if 'end is not specified\n    freq (str): Frequency string ('D'/day, 'H'/hour, 'T'/min, 'min'/min, 'S'/second).\n    fmt (str): Optional format string for parsing.</p>\n\n<p>Returns:\n    list[datetime]: List of datetime objects.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-10-10&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0), ...]   </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0), ...]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">periods</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;S&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;D&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "atrax.Atrax.SSE": {"fullname": "atrax.Atrax.SSE", "modulename": "atrax", "qualname": "Atrax.SSE", "kind": "function", "doc": "<p>Calculate the sum of squared errors (SSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The sum of squared errors.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">SSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">1.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.MSE": {"fullname": "atrax.Atrax.MSE", "modulename": "atrax", "qualname": "Atrax.MSE", "kind": "function", "doc": "<p>Calculate the mean squared error (MSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean squared error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.375</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.RMSE": {"fullname": "atrax.Atrax.RMSE", "modulename": "atrax", "qualname": "Atrax.RMSE", "kind": "function", "doc": "<p>Calculate the root mean squared error (RMSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The root mean squared error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">RMSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.6123724356957945</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.MAE": {"fullname": "atrax.Atrax.MAE", "modulename": "atrax", "qualname": "Atrax.MAE", "kind": "function", "doc": "<p>Calculate the mean absolute error (MAE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean absolute error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MAE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.MAPE": {"fullname": "atrax.Atrax.MAPE", "modulename": "atrax", "qualname": "Atrax.MAPE", "kind": "function", "doc": "<p>Calculate the mean absolute percentage error (MAPE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean absolute percentage error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MAPE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.3273809523809524</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.SMAPE": {"fullname": "atrax.Atrax.SMAPE", "modulename": "atrax", "qualname": "Atrax.SMAPE", "kind": "function", "doc": "<p>Calculate the symmetric mean absolute percentage error (SMAPE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The symmetric mean absolute percentage error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SMAPE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.5787878787878787</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.read_csv": {"fullname": "atrax.Atrax.read_csv", "modulename": "atrax", "qualname": "Atrax.read_csv", "kind": "function", "doc": "<p>Read a CSV file or string into a dataset.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>path_or_str: (str): Path to the CSV file or a CSV formatted string.\nfrom_string: (bool): If True, treats path_or_str as a string, otherwise as a file path.\nencoding: (str): Encoding to use when reading the file\nconverters: (dict): Optional dict of colum: function\nusecols: (list): Optionaal list of columns to keep\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSet: A DataSet object containing the data from the CSV.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_or_str</span>,</span><span class=\"param\">\t<span class=\"n\">from_string</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.get_db": {"fullname": "atrax.Atrax.get_db", "modulename": "atrax", "qualname": "Atrax.get_db", "kind": "function", "doc": "<p>Get a database connection object from a connection string.</p>\n\n<p>Parameters:\n    conn_str (str): Connection string for the database</p>\n\n<p>Returns:\n    Database connection object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.Atrax.read_sql": {"fullname": "atrax.Atrax.read_sql", "modulename": "atrax", "qualname": "Atrax.read_sql", "kind": "function", "doc": "<p>Execute SQL and convert result to Atrax DataSet, without using pandas.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>query : str\n    SQL query to run.\nconn : SQLAlchemy engine/connection, sqlite3, or psycopg2 connection.\nindex_col : str, optional\n    Optional column to set as index.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>DataSet</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">,</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">atrax</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">DataSet</span>:</span></span>", "funcdef": "def"}, "atrax.core": {"fullname": "atrax.core", "modulename": "atrax.core", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.customdatetime": {"fullname": "atrax.core.customdatetime", "modulename": "atrax.core.customdatetime", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.customdatetime.to_datetime": {"fullname": "atrax.core.customdatetime.to_datetime", "modulename": "atrax.core.customdatetime", "qualname": "to_datetime", "kind": "function", "doc": "<p>Convert a string or list of strings to datetime objects.</p>\n\n<p>Parameters:\n    value (str | list[str]): The string or list of strings to convert.\n    fmt (str): Optional format string for parsing.</p>\n\n<p>Returns:\n    datetime | list[datetime]: A single datetime object if a string is provided,\n                                or a list of datetime objects if a list is provided.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2023, 10, 1, 0, 0)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">([</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-10-02&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "atrax.core.customdatetime.date_range": {"fullname": "atrax.core.customdatetime.date_range", "modulename": "atrax.core.customdatetime", "qualname": "date_range", "kind": "function", "doc": "<p>Generate a list of datetime values.</p>\n\n<p>Parameters:\n    start (str | datetime): Start date.\n    end (str | datetime): End date Required is 'periods' is not specified.\n    periods (int): Number of periods to generate. Required if 'end is not specified\n    freq (str): Frequency string ('D'/day, 'H'/hour, 'T'/min, 'min'/min, 'S'/second).\n    fmt (str): Optional format string for parsing.</p>\n\n<p>Returns:\n    list[datetime]: List of datetime objects.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-10-10&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0), ...]   </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.datetime(2023, 10, 1, 0, 0), datetime.datetime(2023, 10, 2, 0, 0), ...]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">periods</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;S&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;D&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "atrax.core.customdatetime.try_parse_date": {"fullname": "atrax.core.customdatetime.try_parse_date", "modulename": "atrax.core.customdatetime", "qualname": "try_parse_date", "kind": "function", "doc": "<p>Try to parse a date string into a datetime object using multiple formats.</p>\n\n<p>Parameters:\n    d (str): The date string to parse.</p>\n\n<p>Returns:\n    datetime: The parsed datetime object.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">try_parse_date</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-10-01&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2023, 10, 1, 0, 0)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.cut": {"fullname": "atrax.core.cut", "modulename": "atrax.core.cut", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.cut.cut": {"fullname": "atrax.core.cut.cut", "modulename": "atrax.core.cut", "qualname": "cut", "kind": "function", "doc": "<p>Bin values into equal-width intervals.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>values : (array-like) The input values to be cut.\nbins : int or sequence of scalars, optional\n    If an int, defines the number of equal-width bins in the range of values.\n    If a sequence, defines the bin edges.\nlabels : array-like, optional\n    Labels for the bins. If None, integer labels are used.\nprecision : int, optional\n    Number of decimal places to round the bin edges.\ntie_breaker : {'upper', 'lower'}, optional\n    Determines how to handle values that fall exactly on the bin edges.\n    'upper' assigns them to the upper bin, 'lower' assigns them to the lower bin.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>binned_values : array-like\n    The binned values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;low&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;medium&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;high&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">[&#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 1, 2, 2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">age_bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">age_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;young&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;middle-ages&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;senior&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">ages</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">age_bins</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">age_labels</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;young&#39;, &#39;middle-ages&#39;, &#39;middle-ages&#39;, &#39;middle-ages&#39;, &#39;senior&#39;, &#39;senior&#39;, &#39;senior&#39;, &#39;senior]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sales</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binned_sales</span> <span class=\"o\">=</span> <span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">sales</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binned_sales</span>\n<span class=\"go\">[0, 0, 1, 1, 2, 2, 3, 3]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cholesterol</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">risk_bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">risk_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Low&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Moderate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;High&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">cholesterol</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">risk_bins</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">risk_labels</span><span class=\"p\">,</span> <span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;Low&#39;, &#39;Low&#39;, &#39;Low&#39;, &#39;High&#39;, &#39;High&#39;, &#39;High]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset": {"fullname": "atrax.core.dataset", "modulename": "atrax.core.dataset", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet": {"fullname": "atrax.core.dataset.DataSet", "modulename": "atrax.core.dataset", "qualname": "DataSet", "kind": "class", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet.__init__": {"fullname": "atrax.core.dataset.DataSet.__init__", "modulename": "atrax.core.dataset", "qualname": "DataSet.__init__", "kind": "function", "doc": "<p>Initialize the DataSet.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>data: (list[dict] or dict[list]): Either row oriented or column oriented data.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">DataSet</span><span class=\"p\">([{</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}])</span>\n<span class=\"go\">col1     col2</span>\n<span class=\"go\">1        2</span>\n<span class=\"go\">3        4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">DataSet</span><span class=\"p\">({</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">([])</span>  <span class=\"c1\"># empty dataset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">({</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col3&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">({</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col3&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col4&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, "atrax.core.dataset.DataSet.index": {"fullname": "atrax.core.dataset.DataSet.index", "modulename": "atrax.core.dataset", "qualname": "DataSet.index", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet.loc": {"fullname": "atrax.core.dataset.DataSet.loc", "modulename": "atrax.core.dataset", "qualname": "DataSet.loc", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet.iloc": {"fullname": "atrax.core.dataset.DataSet.iloc", "modulename": "atrax.core.dataset", "qualname": "DataSet.iloc", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet.concat": {"fullname": "atrax.core.dataset.DataSet.concat", "modulename": "atrax.core.dataset", "qualname": "DataSet.concat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datasets</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.data": {"fullname": "atrax.core.dataset.DataSet.data", "modulename": "atrax.core.dataset", "qualname": "DataSet.data", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.dataset.DataSet.columns": {"fullname": "atrax.core.dataset.DataSet.columns", "modulename": "atrax.core.dataset", "qualname": "DataSet.columns", "kind": "function", "doc": "<p>Return the list of column names in the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.head": {"fullname": "atrax.core.dataset.DataSet.head", "modulename": "atrax.core.dataset", "qualname": "DataSet.head", "kind": "function", "doc": "<p>Return the first n rows of the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.tail": {"fullname": "atrax.core.dataset.DataSet.tail", "modulename": "atrax.core.dataset", "qualname": "DataSet.tail", "kind": "function", "doc": "<p>Return the last n rows of the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.shape": {"fullname": "atrax.core.dataset.DataSet.shape", "modulename": "atrax.core.dataset", "qualname": "DataSet.shape", "kind": "function", "doc": "<p>Return the shape of the dataset as a tuple (rows, columns).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.describe": {"fullname": "atrax.core.dataset.DataSet.describe", "modulename": "atrax.core.dataset", "qualname": "DataSet.describe", "kind": "function", "doc": "<p>Return a summary of the numeric columns in the dataset.\nThis method calculates the mean, standard deviation, min, max, and count for each numeric column.\nNon-numeric columns are ignored in this summary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.info": {"fullname": "atrax.core.dataset.DataSet.info", "modulename": "atrax.core.dataset", "qualname": "DataSet.info", "kind": "function", "doc": "<p>Return a summary of the data including the number of rows, columns, and data types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.apply": {"fullname": "atrax.core.dataset.DataSet.apply", "modulename": "atrax.core.dataset", "qualname": "DataSet.apply", "kind": "function", "doc": "<p>Apply a function to each row (axis=1) or each column (axis=0).\nCurrently supports only row-wise operations.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>func: callable\n    A function that takes a row (dict) and returns a value or dict.\naxis: int, default 1\n    Only axis=1 (row-wise) is currently supported\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list or DataSet</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.copy": {"fullname": "atrax.core.dataset.DataSet.copy", "modulename": "atrax.core.dataset", "qualname": "DataSet.copy", "kind": "function", "doc": "<p>Return a deep copy of the DataSet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.groupby": {"fullname": "atrax.core.dataset.DataSet.groupby", "modulename": "atrax.core.dataset", "qualname": "DataSet.groupby", "kind": "function", "doc": "<p>Group the dataset by one or more columns.</p>\n\n<p>Parameters:\n    by (str or list of str): Column(s) to group by.</p>\n\n<p>Returns:\n    GroupBy: GroupBy object for aggregation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.sort": {"fullname": "atrax.core.dataset.DataSet.sort", "modulename": "atrax.core.dataset", "qualname": "DataSet.sort", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span>, </span><span class=\"param\"><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.filter": {"fullname": "atrax.core.dataset.DataSet.filter", "modulename": "atrax.core.dataset", "qualname": "DataSet.filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">items</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">like</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.drop": {"fullname": "atrax.core.dataset.DataSet.drop", "modulename": "atrax.core.dataset", "qualname": "DataSet.drop", "kind": "function", "doc": "<p>Drop columns or rows frm dataset.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>columns: (list of str): List of column names to drop from the dataset.\nindex :(list): list of row indexes to drop\ninplace: (bool): Modify the current DataSet or return a new one\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSet: A new DataSet object with the specified columns removed.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.rename": {"fullname": "atrax.core.dataset.DataSet.rename", "modulename": "atrax.core.dataset", "qualname": "DataSet.rename", "kind": "function", "doc": "<p>Rename columns in the dataset.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>columns: (dict): A dictionary mapping old column names to new names.\ninplace: (bool): If True, modify the current DataSet; if False, return a new DataSet.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSet: A new DataSet object with renamed columns.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.reset_index": {"fullname": "atrax.core.dataset.DataSet.reset_index", "modulename": "atrax.core.dataset", "qualname": "DataSet.reset_index", "kind": "function", "doc": "<p>Reset the index of the DataSet.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>inplace: (bool): If True, modify the current DataSet; if False, return a new DataSet.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSet: A new DataSet object with reset index.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.set_index": {"fullname": "atrax.core.dataset.DataSet.set_index", "modulename": "atrax.core.dataset", "qualname": "DataSet.set_index", "kind": "function", "doc": "<p>Set a column as the index of the DataSet.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>column: (str): The column name to set as index.\ninplace: (bool): If True, modify the current DataSet; if False, return a new DataSet.\ndrop: (bool): if True, remove column from data\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSet: A new DataSet object with the specified column as index.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.to_dict": {"fullname": "atrax.core.dataset.DataSet.to_dict", "modulename": "atrax.core.dataset", "qualname": "DataSet.to_dict", "kind": "function", "doc": "<p>Convert the DataSet to a list of dictionaries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.to_csv": {"fullname": "atrax.core.dataset.DataSet.to_csv", "modulename": "atrax.core.dataset", "qualname": "DataSet.to_csv", "kind": "function", "doc": "<p>Convert the DataSet to CSV string or write to file.</p>\n\n<p>Parameters:\n    path (str): If given, writes CSV to this file path</p>\n\n<p>Returns:\n    str if path is None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.to_pandas": {"fullname": "atrax.core.dataset.DataSet.to_pandas", "modulename": "atrax.core.dataset", "qualname": "DataSet.to_pandas", "kind": "function", "doc": "<p>Convert the DataSet to a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.convert_column": {"fullname": "atrax.core.dataset.DataSet.convert_column", "modulename": "atrax.core.dataset", "qualname": "DataSet.convert_column", "kind": "function", "doc": "<p>Convert a column using a function.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>column: (str): The column name to convert.\nfunc: (callable): A function that takes a single value and returns the converted value.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.astype": {"fullname": "atrax.core.dataset.DataSet.astype", "modulename": "atrax.core.dataset", "qualname": "DataSet.astype", "kind": "function", "doc": "<p>Convert columns to specified data types.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>dtype_map: (dict): A dictionary mapping column names to target data types.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>DataSEt: A new DataSet with converted columns\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtype_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.dataset.DataSet.merge": {"fullname": "atrax.core.dataset.DataSet.merge", "modulename": "atrax.core.dataset", "qualname": "DataSet.merge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">on</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;inner&#39;</span>, </span><span class=\"param\"><span class=\"n\">suffixes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;_x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_y&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.group": {"fullname": "atrax.core.group", "modulename": "atrax.core.group", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.group.GroupBy": {"fullname": "atrax.core.group.GroupBy", "modulename": "atrax.core.group", "qualname": "GroupBy", "kind": "class", "doc": "<p>GroupBy class for aggregating data based on specified keys.</p>\n\n<p>This class allows you to group a dataset by one or more columns \nand perform aggregations such as sum, mean, count, min, max, \nfirst, and last.</p>\n"}, "atrax.core.group.GroupBy.__init__": {"fullname": "atrax.core.group.GroupBy.__init__", "modulename": "atrax.core.group", "qualname": "GroupBy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">by</span></span>)</span>"}, "atrax.core.group.GroupBy.by": {"fullname": "atrax.core.group.GroupBy.by", "modulename": "atrax.core.group", "qualname": "GroupBy.by", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.group.GroupBy.data": {"fullname": "atrax.core.group.GroupBy.data", "modulename": "atrax.core.group", "qualname": "GroupBy.data", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.group.GroupBy.groups": {"fullname": "atrax.core.group.GroupBy.groups", "modulename": "atrax.core.group", "qualname": "GroupBy.groups", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.group.GroupBy.agg": {"fullname": "atrax.core.group.GroupBy.agg", "modulename": "atrax.core.group", "qualname": "GroupBy.agg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.group.GroupBy.sum": {"fullname": "atrax.core.group.GroupBy.sum", "modulename": "atrax.core.group", "qualname": "GroupBy.sum", "kind": "function", "doc": "<p>Calculate the sum of each group.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.group.GroupBy.mean": {"fullname": "atrax.core.group.GroupBy.mean", "modulename": "atrax.core.group", "qualname": "GroupBy.mean", "kind": "function", "doc": "<p>Calculate the mean of each group.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.locators": {"fullname": "atrax.core.locators", "modulename": "atrax.core.locators", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.metrics": {"fullname": "atrax.core.metrics", "modulename": "atrax.core.metrics", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.metrics.SSE": {"fullname": "atrax.core.metrics.SSE", "modulename": "atrax.core.metrics", "qualname": "SSE", "kind": "function", "doc": "<p>Calculate the sum of squared errors (SSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The sum of squared errors.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">SSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">1.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.metrics.MSE": {"fullname": "atrax.core.metrics.MSE", "modulename": "atrax.core.metrics", "qualname": "MSE", "kind": "function", "doc": "<p>Calculate the mean squared error (MSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean squared error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.375</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.metrics.RMSE": {"fullname": "atrax.core.metrics.RMSE", "modulename": "atrax.core.metrics", "qualname": "RMSE", "kind": "function", "doc": "<p>Calculate the root mean squared error (RMSE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The root mean squared error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">RMSE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.6123724356957945</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.metrics.MAE": {"fullname": "atrax.core.metrics.MAE", "modulename": "atrax.core.metrics", "qualname": "MAE", "kind": "function", "doc": "<p>Calculate the mean absolute error (MAE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean absolute error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MAE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.metrics.MAPE": {"fullname": "atrax.core.metrics.MAPE", "modulename": "atrax.core.metrics", "qualname": "MAPE", "kind": "function", "doc": "<p>Calculate the mean absolute percentage error (MAPE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The mean absolute percentage error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MAPE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.3273809523809524</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.metrics.SMAPE": {"fullname": "atrax.core.metrics.SMAPE", "modulename": "atrax.core.metrics", "qualname": "SMAPE", "kind": "function", "doc": "<p>Calculate the symmetric mean absolute percentage error (SMAPE) between true and predicted values.</p>\n\n<p>Args:</p>\n\n<pre><code>y_true (list or np.array): True values.\ny_pred (list or np.array): Predicted values.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: The symmetric mean absolute percentage error.\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SMAPE</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"go\">0.5787878787878787</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.qcut": {"fullname": "atrax.core.qcut", "modulename": "atrax.core.qcut", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.qcut.qcut": {"fullname": "atrax.core.qcut.qcut", "modulename": "atrax.core.qcut", "qualname": "qcut", "kind": "function", "doc": "<p>Quantile-based discretization function.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>values: list or array-like, the input values to be discretized.</li>\n<li>q: int, number of quantiles to create (default is 4).</li>\n<li>labels: list of labels for the quantiles (optional).</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A list of quantile labels corresponding to the input values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.rolling": {"fullname": "atrax.core.rolling", "modulename": "atrax.core.rolling", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.rolling.RollingSeries": {"fullname": "atrax.core.rolling.RollingSeries", "modulename": "atrax.core.rolling", "qualname": "RollingSeries", "kind": "class", "doc": "<p></p>\n"}, "atrax.core.rolling.RollingSeries.__init__": {"fullname": "atrax.core.rolling.RollingSeries.__init__", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "atrax.core.rolling.RollingSeries.data": {"fullname": "atrax.core.rolling.RollingSeries.data", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.data", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.rolling.RollingSeries.window": {"fullname": "atrax.core.rolling.RollingSeries.window", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.window", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.rolling.RollingSeries.name": {"fullname": "atrax.core.rolling.RollingSeries.name", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.name", "kind": "variable", "doc": "<p></p>\n"}, "atrax.core.rolling.RollingSeries.mean": {"fullname": "atrax.core.rolling.RollingSeries.mean", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.mean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.rolling.RollingSeries.sum": {"fullname": "atrax.core.rolling.RollingSeries.sum", "modulename": "atrax.core.rolling", "qualname": "RollingSeries.sum", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series": {"fullname": "atrax.core.series", "modulename": "atrax.core.series", "kind": "module", "doc": "<p></p>\n"}, "atrax.core.series.Series": {"fullname": "atrax.core.series.Series", "modulename": "atrax.core.series", "qualname": "Series", "kind": "class", "doc": "<p></p>\n"}, "atrax.core.series.Series.__init__": {"fullname": "atrax.core.series.Series.__init__", "modulename": "atrax.core.series", "qualname": "Series.__init__", "kind": "function", "doc": "<p>One-dimensional labeled array for Atrax.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : list\n    A list of values.</p>\n\n<p>name : str, optional\n    The name of the series.\n    defaults to None, which means no name is assigned.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"go\">0     1</span>\n<span class=\"go\">1     2</span>\n<span class=\"go\">2     3</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;numbers&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>\n<span class=\"go\">a     1</span>\n<span class=\"go\">b     2  </span>\n<span class=\"go\">c     3</span>\n<span class=\"go\">Name: numbers, dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">a     1.0</span>\n<span class=\"go\">b     2.0</span>\n<span class=\"go\">c     3.0</span>\n<span class=\"go\">Name: example, dtype: float</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;goodbye&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;whatsup&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">0     hello</span>\n<span class=\"go\">1     goodbye</span>\n<span class=\"go\">2     whatsup</span>\n<span class=\"go\">Name: , dtype: str</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sexy&#39;</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">])</span>\n<span class=\"go\">0     1</span>\n<span class=\"go\">1     True</span>\n<span class=\"go\">2     sexy</span>\n<span class=\"go\">3     2.5</span>\n<span class=\"go\">Name: , dtype: object</span>\n</code></pre>\n</div>\n\n<h5 id=\"this-one-is-interesting-and-probably-needs-attention\">this one is interesting and probably needs attention</h5>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"go\">0    True</span>\n<span class=\"go\">1    False</span>\n<span class=\"go\">2    True</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "atrax.core.series.Series.iloc": {"fullname": "atrax.core.series.Series.iloc", "modulename": "atrax.core.series", "qualname": "Series.iloc", "kind": "variable", "doc": "<p>Provides integer-location based indexing for the Series.</p>\n\n<p>Allows access to elements by their integer position, similar to how NumPy or pandas <code>iloc</code> works.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"go\">b    2</span>\n<span class=\"go\">c    3</span>\n<span class=\"go\">Name: example, dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,],</span>  <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;numbers&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"go\">b    2</span>\n<span class=\"go\">c    3</span>\n<span class=\"go\">d    4</span>\n<span class=\"go\">Name: numbers, dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"go\">e    5</span>\n<span class=\"go\">d    4</span>\n<span class=\"go\">c    3</span>\n<span class=\"go\">b    2</span>\n<span class=\"go\">a    1</span>\n<span class=\"go\">Name: numbers, dtype: int</span>\n</code></pre>\n</div>\n"}, "atrax.core.series.Series.loc": {"fullname": "atrax.core.series.Series.loc", "modulename": "atrax.core.series", "qualname": "Series.loc", "kind": "variable", "doc": "<p>Provides label-based indexing for the Series.\nAllows access to elements by their labels, similar to how pandas <code>loc</code> works.\nExamples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">b    2</span>\n<span class=\"go\">c    3</span>\n<span class=\"go\">Name: example, dtype: int</span>\n</code></pre>\n</div>\n"}, "atrax.core.series.Series.dt": {"fullname": "atrax.core.series.Series.dt", "modulename": "atrax.core.series", "qualname": "Series.dt", "kind": "variable", "doc": "<p>Provides datetime-like properties for the Series.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        &#39;id&#39;: 1,</span>\n<span class=\"go\">        &#39;sale_date&#39;: &#39;1/1/2025&#39;</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        &#39;id&#39;: 2,</span>\n<span class=\"go\">        &#39;sale_date&#39;: &#39;1/2/2025&#39;</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    {</span>\n<span class=\"go\">        &#39;id&#39;: 3,</span>\n<span class=\"go\">        &#39;sale_date&#39;: &#39;1/3/2025&#39;</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">DataSet</span><span class=\"p\">(</span><span class=\"n\">test_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;weekday&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;sale_date&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">weekday</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">id    sale_date    weekday</span>\n<span class=\"go\">1     1/1/2025     2</span>\n<span class=\"go\">2     1/2/2025     3</span>\n<span class=\"go\">3     1/3/2025     4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_weekend&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;sale_date&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">is_weekend</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">id    sale_date    weekday   is_weekend</span>\n<span class=\"go\">1     1/1/2025     2         False</span>\n<span class=\"go\">2     1/2/2025     3         False</span>\n<span class=\"go\">3     1/3/2025     4         False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;month&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;sale_date&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">month</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">id    sale_date    weekday   is_weekend   month</span>\n<span class=\"go\">1     1/1/2025     2         False        1</span>\n<span class=\"go\">2     1/2/2025     3         False        1</span>\n<span class=\"go\">3     1/3/2025     4         False        1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;day&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;sale_date&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">day</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">id    sale_date    weekday   is_weekend   month  day</span>\n<span class=\"go\">1     1/1/2025     2         False        1      1</span>\n<span class=\"go\">2     1/2/2025     3         False        1      2</span>\n<span class=\"go\">3     1/3/2025     4         False        1      3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;year&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;sale_date&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">year</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">id    sale_date    weekday   is_weekend   month  day  year</span>\n<span class=\"go\">1     1/1/2025     2         False        1      1    2025</span>\n<span class=\"go\">2     1/2/2025     3         False        1      2    2025</span>\n<span class=\"go\">3     1/3/2025     4         False        1      3    2025</span>\n</code></pre>\n</div>\n"}, "atrax.core.series.Series.values": {"fullname": "atrax.core.series.Series.values", "modulename": "atrax.core.series", "qualname": "Series.values", "kind": "variable", "doc": "<p>Returns the underlying data of the Series as a list.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"go\">[1, 2, 3]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"go\">list</span>\n</code></pre>\n</div>\n"}, "atrax.core.series.Series.name": {"fullname": "atrax.core.series.Series.name", "modulename": "atrax.core.series", "qualname": "Series.name", "kind": "variable", "doc": "<p>Returns the name of the Series.</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">atrax</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Atrax</span> <span class=\"k\">as</span> <span class=\"n\">tx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;example&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n"}, "atrax.core.series.Series.data": {"fullname": "atrax.core.series.Series.data", "modulename": "atrax.core.series", "qualname": "Series.data", "kind": "variable", "doc": "<p>Return the data as a list.</p>\n"}, "atrax.core.series.Series.index": {"fullname": "atrax.core.series.Series.index", "modulename": "atrax.core.series", "qualname": "Series.index", "kind": "variable", "doc": "<p>Return the index as a list of labels. If no index is provided, it defaults to a range of integers.</p>\n"}, "atrax.core.series.Series.dtype": {"fullname": "atrax.core.series.Series.dtype", "modulename": "atrax.core.series", "qualname": "Series.dtype", "kind": "variable", "doc": "<p>Return the data type of the Series based on the data provided.</p>\n"}, "atrax.core.series.Series.head": {"fullname": "atrax.core.series.Series.head", "modulename": "atrax.core.series", "qualname": "Series.head", "kind": "function", "doc": "<p>Return the first n elements of the Series.</p>\n\n<p>Parameters:\nn (int): The number of elements to return. Defaults to 5.</p>\n\n<p>Returns:\nSeries: A new Series containing the first n elements.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    2</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.tail": {"fullname": "atrax.core.series.Series.tail", "modulename": "atrax.core.series", "qualname": "Series.tail", "kind": "function", "doc": "<p>Return the last n elements of the Series.</p>\n\n<p>Parameters:\nn (int): The number of elements to return. Defaults to 5.</p>\n\n<p>Returns:\nSeries: A new Series containing the last n elements.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">3    4 </span>\n<span class=\"go\">4    5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.unique": {"fullname": "atrax.core.series.Series.unique", "modulename": "atrax.core.series", "qualname": "Series.unique", "kind": "function", "doc": "<p>Return the unique values in the Series.</p>\n\n<p>Returns:\nSeries: A new Series containing the unique values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unique_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">unique_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    2</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">3    4</span>\n<span class=\"go\">Name: Unique(), dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.nunique": {"fullname": "atrax.core.series.Series.nunique", "modulename": "atrax.core.series", "qualname": "Series.nunique", "kind": "function", "doc": "<p>Return the number of unique values in the Series.</p>\n\n<p>Returns:\nint: The number of unique values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_unique</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nunique</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">num_unique</span><span class=\"p\">)</span>\n<span class=\"go\">4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.isin": {"fullname": "atrax.core.series.Series.isin", "modulename": "atrax.core.series", "qualname": "Series.isin", "kind": "function", "doc": "<p>Check if each element in the Series is in the provided list of values.</p>\n\n<p>Parameters:\nvalues (list): A list of values to check against.</p>\n\n<p>Returns:\nSeries: A new Series containing boolean values indicating membership.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">0     False</span>\n<span class=\"go\">1     True</span>\n<span class=\"go\">2     False</span>\n<span class=\"go\">3     True</span>\n<span class=\"go\">4     False</span>\n<span class=\"go\">Name: IsIn(), dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.between": {"fullname": "atrax.core.series.Series.between", "modulename": "atrax.core.series", "qualname": "Series.between", "kind": "function", "doc": "<p>Check if each element in the Series is between two values.</p>\n\n<p>Parameters:\nleft (int/float): The lower bound.</p>\n\n<p>right (int/float): The upper bound.</p>\n\n<p>inclusive (bool): Whether to include the bounds. Defaults to True.</p>\n\n<p>Returns:\nSeries: A new Series containing boolean values indicating if each element is between the bounds.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">0     False</span>\n<span class=\"go\">1     True</span>\n<span class=\"go\">2     True</span>\n<span class=\"go\">3     True</span>\n<span class=\"go\">4     False</span>\n<span class=\"go\">Name: Between(, 2, 4), dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span>, </span><span class=\"param\"><span class=\"n\">inclusive</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.to_list": {"fullname": "atrax.core.series.Series.to_list", "modulename": "atrax.core.series", "qualname": "Series.to_list", "kind": "function", "doc": "<p>Convert the Series to a list.</p>\n\n<p>Returns:\nlist: The data in the Series as a list.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n<span class=\"go\">[1, 2, 3]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.apply": {"fullname": "atrax.core.series.Series.apply", "modulename": "atrax.core.series", "qualname": "Series.apply", "kind": "function", "doc": "<p>Apply a function to each element in the Series.</p>\n\n<p>Parameters:\nfunc (function): A function to apply to each element.   </p>\n\n<p>Returns:\nSeries: A new Series with the function applied to each element.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">0    2</span>\n<span class=\"go\">1    4</span>\n<span class=\"go\">2    6</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">square</span><span class=\"p\">)</span>   \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    4  </span>\n<span class=\"go\">2    9</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.to_datetime": {"fullname": "atrax.core.series.Series.to_datetime", "modulename": "atrax.core.series", "qualname": "Series.to_datetime", "kind": "function", "doc": "<p>Convert the Series to datetime objects.</p>\n\n<p>I think we need to look at the other to_datetime function as I think it is more robust.</p>\n\n<p>Parameters:</p>\n\n<p>format (str): The format of the date strings. Defaults to '%m/%d/%Y'.</p>\n\n<p>errors (str): 'raise' to throw errors, 'coerce' to return None on failure</p>\n\n<p>Returns:\nSeries: A new Series with datetime objects.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;2025-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2025-01-02&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2025-01-03&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dt_series</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s1\">&#39;coerce&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dt_series</span><span class=\"p\">)</span>\n<span class=\"go\">0    2025-01-01 00:00:00</span>\n<span class=\"go\">1    2025-01-02 00:00:00</span>\n<span class=\"go\">2    2025-01-03 00:00:00</span>\n<span class=\"go\">Name: , dtype: datetime</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s1\">&#39;raise&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.astype": {"fullname": "atrax.core.series.Series.astype", "modulename": "atrax.core.series", "qualname": "Series.astype", "kind": "function", "doc": "<p>Convert the Series to a specified data type.</p>\n\n<p>Parameters:</p>\n\n<p>dtype (type): The Python type to cast to (e.g., int, float, str)</p>\n\n<p>Returns:</p>\n\n<p>Series: A new Series with the converted data type.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_series</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_series</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    2</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_series</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_series</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    2</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">Name: , dtype: int       </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f_series</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f_series</span>\n<span class=\"go\">0    1.0</span>\n<span class=\"go\">1    2.0</span>\n<span class=\"go\">2    3.0</span>\n<span class=\"go\">Name: , dtype: float</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.rolling": {"fullname": "atrax.core.series.Series.rolling", "modulename": "atrax.core.series", "qualname": "Series.rolling", "kind": "function", "doc": "<p>Create a rolling window object for the Series.</p>\n\n<p>Parameters:</p>\n\n<p>window (int): The size of the rolling window.</p>\n\n<p>Returns:</p>\n\n<p>RollingSeries: A RollingSeries object for performing rolling operations.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rolling_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rolling</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rolling_s</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">0    None</span>\n<span class=\"go\">1    None</span>\n<span class=\"go\">2    2.0</span>\n<span class=\"go\">3    3.0</span>\n<span class=\"go\">4    4.0</span>\n<span class=\"go\">Name: rolling_series_rolling_mean, dtype: object</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.cut": {"fullname": "atrax.core.series.Series.cut", "modulename": "atrax.core.series", "qualname": "Series.cut", "kind": "function", "doc": "<p>Bin the Series into discrete intervals.</p>\n\n<p>Parameters:</p>\n\n<p>bins (int): Number of bins to create. Defaults to 4.</p>\n\n<p>labels (list): Optional labels for the bins. If None, default labels will be used.</p>\n\n<p>precision (int): Number of decimal places for bin edges. Defaults to 3.</p>\n\n<p>tie_breaker (str): How to handle ties ('upper', 'lower', 'random'). Defaults to 'upper'.</p>\n\n<p>Returns:</p>\n\n<p>Series: A new Series with binned data.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binned_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;Low&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Medium&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;High&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">binned_s</span><span class=\"p\">)</span>\n<span class=\"go\">0      Low</span>\n<span class=\"go\">1      Low</span>\n<span class=\"go\">2      Low</span>\n<span class=\"go\">3      Medium</span>\n<span class=\"go\">4      Medium</span>\n<span class=\"go\">5      Medium</span>\n<span class=\"go\">6      High</span>\n<span class=\"go\">7      High</span>\n<span class=\"go\">8      High</span>\n<span class=\"go\">9      High</span>\n<span class=\"go\">Name: dtype: str</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">tie_breaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;upper&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.rank": {"fullname": "atrax.core.series.Series.rank", "modulename": "atrax.core.series", "qualname": "Series.rank", "kind": "function", "doc": "<p>Compute numerical data ranks (1 through n) along the Series.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li><p>method: {'average', 'min', 'max', 'first', 'dense'}, default 'average'</p></li>\n<li><p>ascending: boolean, default True</p></li>\n</ul>\n\n<p>Returns:</p>\n\n<p>Series: A new Series with ranked values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ranked_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;average&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ranked_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    4.0</span>\n<span class=\"go\">1    1.0</span>\n<span class=\"go\">2    2.5</span>\n<span class=\"go\">3    2.5</span>\n<span class=\"go\">4    5.0</span>\n<span class=\"go\">Name: , dtype: float</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ranked_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;min&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ranked_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    4</span>\n<span class=\"go\">1    1</span>\n<span class=\"go\">2    2</span>\n<span class=\"go\">3    2</span>\n<span class=\"go\">4    5</span>\n<span class=\"go\">Name: , dtype: int    </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ranked_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;max&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ranked_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    4</span>\n<span class=\"go\">1    1</span>\n<span class=\"go\">2    3</span>\n<span class=\"go\">3    3</span>\n<span class=\"go\">4    5</span>\n<span class=\"go\">Name: , dtype: int  </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ranked_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;first&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ranked_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    4</span>\n<span class=\"go\">1    1</span>\n<span class=\"go\">2    2</span>\n<span class=\"go\">3    3</span>\n<span class=\"go\">4    5</span>\n<span class=\"go\">Name: , dtype: int   </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ranked_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ranked_s</span><span class=\"p\">)</span>\n<span class=\"go\">0    3</span>\n<span class=\"go\">1    1</span>\n<span class=\"go\">2    2</span>\n<span class=\"go\">3    2</span>\n<span class=\"go\">4    4</span>\n<span class=\"go\">Name: , dtype: int</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;average&#39;</span>, </span><span class=\"param\"><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.map": {"fullname": "atrax.core.series.Series.map", "modulename": "atrax.core.series", "qualname": "Series.map", "kind": "function", "doc": "<p>Map values of the Series using an input mapping or function.</p>\n\n<p>Parameters:</p>\n\n<p>arg (dict or function): A mapping dictionary or a function to apply to each value.</p>\n\n<p>Returns:</p>\n\n<p>Series: A new Series with mapped values.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;one&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;two&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;three&#39;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mapped_s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mapped_s</span><span class=\"p\">)</span>\n<span class=\"go\">a    one</span>\n<span class=\"go\">b    two</span>\n<span class=\"go\">c    three</span>\n<span class=\"go\">Name: example_mapped, dtype: str</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.quantile": {"fullname": "atrax.core.series.Series.quantile", "modulename": "atrax.core.series", "qualname": "Series.quantile", "kind": "function", "doc": "<p>Compute the q-th quantile of the Series.</p>\n\n<p>Parameters:</p>\n\n<p>q (float): The quantile to compute (0 &lt;= q &lt;= 1).</p>\n\n<p>Returns:</p>\n\n<p>float: The q-th quantile value.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">quantile</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q_value</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">quantile</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q_value</span><span class=\"p\">)</span>\n<span class=\"go\">2.0       </span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"go\"> &gt;&gt;&gt; q_value = s.quantile(0.75)</span>\n<span class=\"go\"> &gt;&gt;&gt; print(q_value)</span>\n<span class=\"go\"> 4.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.percentile": {"fullname": "atrax.core.series.Series.percentile", "modulename": "atrax.core.series", "qualname": "Series.percentile", "kind": "function", "doc": "<p>Equivalent to quantile</p>\n\n<p>Compute the p-th percentile of the Series.</p>\n\n<p>Parameters:</p>\n\n<p>p (float or list): The percentile to compute (0 &lt;= p &lt;= 100).</p>\n\n<p>Returns:</p>\n\n<p>float or list: The p-th percentile value(s).</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">percentile</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p_value</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.mean": {"fullname": "atrax.core.series.Series.mean", "modulename": "atrax.core.series", "qualname": "Series.mean", "kind": "function", "doc": "<p>Compute the mean of the Series.</p>\n\n<p>Returns:</p>\n\n<p>float: The mean value of the Series.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mean_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mean_value</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.std": {"fullname": "atrax.core.series.Series.std", "modulename": "atrax.core.series", "qualname": "Series.std", "kind": "function", "doc": "<p>Compute the standard deviation of the Series ignoring None.</p>\n\n<p>Parameters:</p>\n\n<p>ddof (int): Delta degrees of freedom. Defaults to 1.\n    The divisor used in calculations is N - ddof, where N is the number of non-None element</p>\n\n<p>Returns:</p>\n\n<p>float: The standard deviation of the Series.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span>\n<span class=\"go\">1.5811388300841898</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ddof</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.var": {"fullname": "atrax.core.series.Series.var", "modulename": "atrax.core.series", "qualname": "Series.var", "kind": "function", "doc": "<p>Compute the variance of the Series, ignoring None.</p>\n\n<p>Parameters:</p>\n\n<pre><code>ddof (int): Delta Degrees of Freedom. The divisor used in \n            calculations is N - ddof, where N is the number of non-None elements.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>float: Variance of the values\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">var_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">var_value</span><span class=\"p\">)</span>\n<span class=\"go\">2.5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ddof</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.median": {"fullname": "atrax.core.series.Series.median", "modulename": "atrax.core.series", "qualname": "Series.median", "kind": "function", "doc": "<p>Compute the median of the Series, ignoring None.</p>\n\n<p>Returns:</p>\n\n<pre><code>float: Median value\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">median_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">median_value</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.mode": {"fullname": "atrax.core.series.Series.mode", "modulename": "atrax.core.series", "qualname": "Series.mode", "kind": "function", "doc": "<p>Compute the mode(s) of the Series, ignoring None.</p>\n\n<p>Returns:</p>\n\n<pre><code>list: List of the most common value(s)\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mode_values</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mode_values</span><span class=\"p\">)</span>\n<span class=\"go\">4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.min": {"fullname": "atrax.core.series.Series.min", "modulename": "atrax.core.series", "qualname": "Series.min", "kind": "function", "doc": "<p>Return the minimum value in the Series, ignoring None.</p>\n\n<p>Returns:</p>\n\n<pre><code>float: Minimum value\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">min_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">min_value</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.core.series.Series.max": {"fullname": "atrax.core.series.Series.max", "modulename": "atrax.core.series", "qualname": "Series.max", "kind": "function", "doc": "<p>Return the maximum value in the Series, ignoring None.</p>\n\n<p>Returns:</p>\n\n<pre><code>float: Maximum value\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">max_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"p\">)</span>\n<span class=\"go\">5</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "atrax.version": {"fullname": "atrax.version", "modulename": "atrax.version", "kind": "module", "doc": "<p></p>\n"}}, "docInfo": {"atrax": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.Atrax": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.Atrax.Series": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.Atrax.DataSet": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.Atrax.qcut": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 72}, "atrax.Atrax.cut": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 1161}, "atrax.Atrax.to_datetime": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 188}, "atrax.Atrax.date_range": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 199, "bases": 0, "doc": 251}, "atrax.Atrax.SSE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 216}, "atrax.Atrax.MSE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 209}, "atrax.Atrax.RMSE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 211}, "atrax.Atrax.MAE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 209}, "atrax.Atrax.MAPE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 211}, "atrax.Atrax.SMAPE": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 213}, "atrax.Atrax.read_csv": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 98}, "atrax.Atrax.get_db": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 30}, "atrax.Atrax.read_sql": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 52}, "atrax.core": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.customdatetime": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.customdatetime.to_datetime": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 188}, "atrax.core.customdatetime.date_range": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 199, "bases": 0, "doc": 251}, "atrax.core.customdatetime.try_parse_date": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 87}, "atrax.core.cut": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.cut.cut": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 1161}, "atrax.core.dataset": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 479}, "atrax.core.dataset.DataSet.index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.loc": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.iloc": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.concat": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.data": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.columns": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "atrax.core.dataset.DataSet.head": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 11}, "atrax.core.dataset.DataSet.tail": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 11}, "atrax.core.dataset.DataSet.shape": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 14}, "atrax.core.dataset.DataSet.describe": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 36}, "atrax.core.dataset.DataSet.info": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 18}, "atrax.core.dataset.DataSet.apply": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 65}, "atrax.core.dataset.DataSet.copy": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "atrax.core.dataset.DataSet.groupby": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 36}, "atrax.core.dataset.DataSet.sort": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.filter": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "atrax.core.dataset.DataSet.drop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 71}, "atrax.core.dataset.DataSet.rename": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 59}, "atrax.core.dataset.DataSet.reset_index": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 48}, "atrax.core.dataset.DataSet.set_index": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 73}, "atrax.core.dataset.DataSet.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "atrax.core.dataset.DataSet.to_csv": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 35}, "atrax.core.dataset.DataSet.to_pandas": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "atrax.core.dataset.DataSet.convert_column": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 40}, "atrax.core.dataset.DataSet.astype": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 45}, "atrax.core.dataset.DataSet.merge": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 3}, "atrax.core.group": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 41}, "atrax.core.group.GroupBy.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy.by": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy.data": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy.groups": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy.agg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "atrax.core.group.GroupBy.sum": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 9}, "atrax.core.group.GroupBy.mean": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 9}, "atrax.core.locators": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.metrics": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.metrics.SSE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 216}, "atrax.core.metrics.MSE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 209}, "atrax.core.metrics.RMSE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 211}, "atrax.core.metrics.MAE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 209}, "atrax.core.metrics.MAPE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 211}, "atrax.core.metrics.SMAPE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 213}, "atrax.core.qcut": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.qcut.qcut": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 72}, "atrax.core.rolling": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.data": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.window": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.mean": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "atrax.core.rolling.RollingSeries.sum": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "atrax.core.series": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.series.Series": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "atrax.core.series.Series.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 669}, "atrax.core.series.Series.iloc": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 485}, "atrax.core.series.Series.loc": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 241}, "atrax.core.series.Series.dt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 717}, "atrax.core.series.Series.values": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 203}, "atrax.core.series.Series.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 237}, "atrax.core.series.Series.data": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "atrax.core.series.Series.index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 23}, "atrax.core.series.Series.dtype": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 15}, "atrax.core.series.Series.head": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 152}, "atrax.core.series.Series.tail": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 148}, "atrax.core.series.Series.unique": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 161}, "atrax.core.series.Series.nunique": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 142}, "atrax.core.series.Series.isin": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 216}, "atrax.core.series.Series.between": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 214}, "atrax.core.series.Series.to_list": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 125}, "atrax.core.series.Series.apply": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 292}, "atrax.core.series.Series.to_datetime": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 254}, "atrax.core.series.Series.astype": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 425}, "atrax.core.series.Series.rolling": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 193}, "atrax.core.series.Series.cut": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 323}, "atrax.core.series.Series.rank": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 853}, "atrax.core.series.Series.map": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 283}, "atrax.core.series.Series.quantile": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 372}, "atrax.core.series.Series.percentile": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 171}, "atrax.core.series.Series.mean": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 137}, "atrax.core.series.Series.std": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 146}, "atrax.core.series.Series.var": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 171}, "atrax.core.series.Series.median": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 137}, "atrax.core.series.Series.mode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 154}, "atrax.core.series.Series.min": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 143}, "atrax.core.series.Series.max": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 143}, "atrax.version": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}}, "length": 115, "save": true}, "index": {"qualname": {"root": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"atrax.Atrax": {"tf": 1}, "atrax.Atrax.Series": {"tf": 1}, "atrax.Atrax.DataSet": {"tf": 1}, "atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 16}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.group.GroupBy.agg": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.Series": {"tf": 1}, "atrax.core.series.Series": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 34}}}}, "t": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.shape": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.sort": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.std": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"atrax.core.dataset.DataSet.data": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.DataSet": {"tf": 1}, "atrax.core.dataset.DataSet": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.index": {"tf": 1}, "atrax.core.dataset.DataSet.loc": {"tf": 1}, "atrax.core.dataset.DataSet.iloc": {"tf": 1}, "atrax.core.dataset.DataSet.concat": {"tf": 1}, "atrax.core.dataset.DataSet.data": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.dataset.DataSet.filter": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 29}}}}, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 3}}}}}}}, "b": {"docs": {"atrax.Atrax.get_db": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.to_dict": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"atrax.core.series.Series.dt": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.dtype": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.quantile": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.concat": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.dataset.DataSet.columns": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.copy": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 7}, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}, "k": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.RMSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.reset_index": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.rolling": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.rolling.RollingSeries": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.window": {"tf": 1}, "atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}}, "df": 7}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MAE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}}, "df": 2}, "p": {"docs": {"atrax.core.series.Series.map": {"tf": 1}}, "df": 1, "e": {"docs": {"atrax.Atrax.MAPE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}}, "df": 2}}, "x": {"docs": {"atrax.core.series.Series.max": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.median": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.mode": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.min": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.get_db": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.group.GroupBy.by": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.group.GroupBy.groups": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}}, "df": 9}}, "s": {"docs": {"atrax.core.group.GroupBy.groups": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.to_pandas": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.percentile": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"atrax.core.dataset.DataSet.index": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}}, "df": 4}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"atrax.core.dataset.DataSet.info": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.iloc": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.loc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.to_list": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.dataset.DataSet.filter": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.group.GroupBy.by": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.rolling.RollingSeries.window": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.nunique": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"atrax.core.series.Series.var": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.unique": {"tf": 1}}, "df": 1}}}}}}}}, "fullname": {"root": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"atrax": {"tf": 1}, "atrax.Atrax": {"tf": 1.4142135623730951}, "atrax.Atrax.Series": {"tf": 1.4142135623730951}, "atrax.Atrax.DataSet": {"tf": 1.4142135623730951}, "atrax.Atrax.qcut": {"tf": 1.4142135623730951}, "atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1.4142135623730951}, "atrax.core": {"tf": 1}, "atrax.core.customdatetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset": {"tf": 1}, "atrax.core.dataset.DataSet": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.index": {"tf": 1}, "atrax.core.dataset.DataSet.loc": {"tf": 1}, "atrax.core.dataset.DataSet.iloc": {"tf": 1}, "atrax.core.dataset.DataSet.concat": {"tf": 1}, "atrax.core.dataset.DataSet.data": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.dataset.DataSet.filter": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.dataset.DataSet.merge": {"tf": 1}, "atrax.core.group": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.group.GroupBy.by": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.group.GroupBy.groups": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.locators": {"tf": 1}, "atrax.core.metrics": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.rolling": {"tf": 1}, "atrax.core.rolling.RollingSeries": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.window": {"tf": 1}, "atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}, "atrax.core.series": {"tf": 1}, "atrax.core.series.Series": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}, "atrax.version": {"tf": 1}}, "df": 115}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.group.GroupBy.agg": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.Series": {"tf": 1}, "atrax.core.series": {"tf": 1}, "atrax.core.series.Series": {"tf": 1.4142135623730951}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.data": {"tf": 1.4142135623730951}, "atrax.core.series.Series.index": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dtype": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.unique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 35}}}}, "t": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.shape": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.sort": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.std": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"atrax.core.dataset.DataSet.data": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.DataSet": {"tf": 1}, "atrax.core.dataset": {"tf": 1}, "atrax.core.dataset.DataSet": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.loc": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.iloc": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.concat": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.data": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.columns": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.head": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.tail": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.shape": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.describe": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.info": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.copy": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.groupby": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.sort": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.filter": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.merge": {"tf": 1.4142135623730951}}, "df": 30}}}}, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 3}}}}}}}, "b": {"docs": {"atrax.Atrax.get_db": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.to_dict": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"atrax.core.series.Series.dt": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.dtype": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.quantile": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 4}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.customdatetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core": {"tf": 1}, "atrax.core.customdatetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset": {"tf": 1}, "atrax.core.dataset.DataSet": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.index": {"tf": 1}, "atrax.core.dataset.DataSet.loc": {"tf": 1}, "atrax.core.dataset.DataSet.iloc": {"tf": 1}, "atrax.core.dataset.DataSet.concat": {"tf": 1}, "atrax.core.dataset.DataSet.data": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.dataset.DataSet.filter": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.dataset.DataSet.merge": {"tf": 1}, "atrax.core.group": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.group.GroupBy.by": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.group.GroupBy.groups": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.locators": {"tf": 1}, "atrax.core.metrics": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.rolling": {"tf": 1}, "atrax.core.rolling.RollingSeries": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.window": {"tf": 1}, "atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}, "atrax.core.series": {"tf": 1}, "atrax.core.series.Series": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 97}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.concat": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.dataset.DataSet.columns": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.copy": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 7}, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}, "k": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.RMSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.reset_index": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.rolling": {"tf": 1}, "atrax.core.rolling.RollingSeries": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.window": {"tf": 1}, "atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.rolling.RollingSeries": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.data": {"tf": 1}, "atrax.core.rolling.RollingSeries.window": {"tf": 1}, "atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}}, "df": 7}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MAE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}}, "df": 2}, "p": {"docs": {"atrax.core.series.Series.map": {"tf": 1}}, "df": 1, "e": {"docs": {"atrax.Atrax.MAPE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}}, "df": 2}}, "x": {"docs": {"atrax.core.series.Series.max": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.metrics": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 7}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.median": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.mode": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.min": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.get_db": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.group": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.group.GroupBy.by": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.group.GroupBy.groups": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}}, "df": 9, "b": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.group.GroupBy.by": {"tf": 1}, "atrax.core.group.GroupBy.data": {"tf": 1}, "atrax.core.group.GroupBy.groups": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}}, "df": 9}}, "s": {"docs": {"atrax.core.group.GroupBy.groups": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.to_pandas": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.percentile": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"atrax.core.dataset.DataSet.index": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}}, "df": 4}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"atrax.core.dataset.DataSet.info": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.iloc": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.loc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.locators": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.to_list": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.dataset.DataSet.filter": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.group.GroupBy.by": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.rolling.RollingSeries.window": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.rolling.RollingSeries.name": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.nunique": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"atrax.core.series.Series.var": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.version": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.unique": {"tf": 1}}, "df": 1}}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"docs": {"atrax.core.dataset.DataSet.concat": {"tf": 1}}, "df": 1}, "1": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 3}, "3": {"9": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 3.1622776601683795}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 3.1622776601683795}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.merge": {"tf": 2.449489742783178}, "atrax.core.series.Series.to_datetime": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}}, "df": 9}, "docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}, "4": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 5}, "5": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}}, "df": 4}, "8": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}, "docs": {"atrax.Atrax.qcut": {"tf": 5.0990195135927845}, "atrax.Atrax.cut": {"tf": 6.6332495807108}, "atrax.Atrax.to_datetime": {"tf": 8.12403840463596}, "atrax.Atrax.date_range": {"tf": 12.609520212918492}, "atrax.Atrax.SSE": {"tf": 3.7416573867739413}, "atrax.Atrax.MSE": {"tf": 3.7416573867739413}, "atrax.Atrax.RMSE": {"tf": 3.7416573867739413}, "atrax.Atrax.MAE": {"tf": 3.7416573867739413}, "atrax.Atrax.MAPE": {"tf": 3.7416573867739413}, "atrax.Atrax.SMAPE": {"tf": 3.7416573867739413}, "atrax.Atrax.read_csv": {"tf": 7.615773105863909}, "atrax.Atrax.get_db": {"tf": 3.7416573867739413}, "atrax.Atrax.read_sql": {"tf": 9.273618495495704}, "atrax.core.customdatetime.to_datetime": {"tf": 8.12403840463596}, "atrax.core.customdatetime.date_range": {"tf": 12.609520212918492}, "atrax.core.customdatetime.try_parse_date": {"tf": 3.1622776601683795}, "atrax.core.cut.cut": {"tf": 6.6332495807108}, "atrax.core.dataset.DataSet.__init__": {"tf": 4.123105625617661}, "atrax.core.dataset.DataSet.concat": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.columns": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.head": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.tail": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.shape": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.describe": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.info": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.apply": {"tf": 4.69041575982343}, "atrax.core.dataset.DataSet.copy": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.groupby": {"tf": 3.7416573867739413}, "atrax.core.dataset.DataSet.sort": {"tf": 4.69041575982343}, "atrax.core.dataset.DataSet.filter": {"tf": 5.0990195135927845}, "atrax.core.dataset.DataSet.drop": {"tf": 5.830951894845301}, "atrax.core.dataset.DataSet.rename": {"tf": 5.0990195135927845}, "atrax.core.dataset.DataSet.reset_index": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.set_index": {"tf": 5.477225575051661}, "atrax.core.dataset.DataSet.to_dict": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.to_csv": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.convert_column": {"tf": 4.69041575982343}, "atrax.core.dataset.DataSet.astype": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.merge": {"tf": 7.14142842854285}, "atrax.core.group.GroupBy.__init__": {"tf": 3.4641016151377544}, "atrax.core.group.GroupBy.agg": {"tf": 4.69041575982343}, "atrax.core.group.GroupBy.sum": {"tf": 3.1622776601683795}, "atrax.core.group.GroupBy.mean": {"tf": 3.1622776601683795}, "atrax.core.metrics.SSE": {"tf": 3.7416573867739413}, "atrax.core.metrics.MSE": {"tf": 3.7416573867739413}, "atrax.core.metrics.RMSE": {"tf": 3.7416573867739413}, "atrax.core.metrics.MAE": {"tf": 3.7416573867739413}, "atrax.core.metrics.MAPE": {"tf": 3.7416573867739413}, "atrax.core.metrics.SMAPE": {"tf": 3.7416573867739413}, "atrax.core.qcut.qcut": {"tf": 5.0990195135927845}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 4.47213595499958}, "atrax.core.rolling.RollingSeries.mean": {"tf": 3.1622776601683795}, "atrax.core.rolling.RollingSeries.sum": {"tf": 3.1622776601683795}, "atrax.core.series.Series.__init__": {"tf": 4.898979485566356}, "atrax.core.series.Series.head": {"tf": 4.242640687119285}, "atrax.core.series.Series.tail": {"tf": 4.242640687119285}, "atrax.core.series.Series.unique": {"tf": 3.1622776601683795}, "atrax.core.series.Series.nunique": {"tf": 3.1622776601683795}, "atrax.core.series.Series.isin": {"tf": 3.7416573867739413}, "atrax.core.series.Series.between": {"tf": 5.0990195135927845}, "atrax.core.series.Series.to_list": {"tf": 3.1622776601683795}, "atrax.core.series.Series.apply": {"tf": 3.7416573867739413}, "atrax.core.series.Series.to_datetime": {"tf": 5.830951894845301}, "atrax.core.series.Series.astype": {"tf": 3.7416573867739413}, "atrax.core.series.Series.rolling": {"tf": 3.7416573867739413}, "atrax.core.series.Series.cut": {"tf": 6.6332495807108}, "atrax.core.series.Series.rank": {"tf": 5.291502622129181}, "atrax.core.series.Series.map": {"tf": 3.7416573867739413}, "atrax.core.series.Series.quantile": {"tf": 3.7416573867739413}, "atrax.core.series.Series.percentile": {"tf": 3.7416573867739413}, "atrax.core.series.Series.mean": {"tf": 3.1622776601683795}, "atrax.core.series.Series.std": {"tf": 4.242640687119285}, "atrax.core.series.Series.var": {"tf": 4.242640687119285}, "atrax.core.series.Series.median": {"tf": 3.1622776601683795}, "atrax.core.series.Series.mode": {"tf": 3.1622776601683795}, "atrax.core.series.Series.min": {"tf": 3.1622776601683795}, "atrax.core.series.Series.max": {"tf": 3.1622776601683795}}, "df": 78, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}}, "df": 7}}}}}}, "q": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 5}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.filter": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.Atrax.read_csv": {"tf": 1.7320508075688772}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.filter": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}}, "df": 3}}, "p": {"docs": {"atrax.core.series.Series.percentile": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 12}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "g": {"2": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}}, "df": 16}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "f": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.7320508075688772}, "atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"3": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.dataset.DataSet.filter": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.dataset.DataSet.merge": {"tf": 1}, "atrax.core.group.GroupBy.agg": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 49}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 2}, "atrax.Atrax.date_range": {"tf": 2.449489742783178}, "atrax.core.customdatetime.to_datetime": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 2.449489742783178}}, "df": 4}}}}, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}, "a": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.group.GroupBy.__init__": {"tf": 1}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"atrax.core.dataset.DataSet.concat": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "r": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.filter": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}}}, "m": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.merge": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 14}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {"atrax.Atrax.get_db": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "l": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 2, "s": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.concat": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.dataset.DataSet.sort": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.map": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.group.GroupBy.agg": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"atrax.core.dataset.DataSet.merge": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.group.GroupBy.agg": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.rolling.RollingSeries.__init__": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}}}}, "bases": {"root": {"docs": {}, "df": 0}}, "doc": {"root": {"0": {"0": {"docs": {}, "df": 0, ":": {"0": {"0": {"docs": {}, "df": 0, ":": {"0": {"0": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "1": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 2.8284271247461903}}, "df": 6}, "2": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 3}, "3": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"atrax.Atrax.cut": {"tf": 3.4641016151377544}, "atrax.Atrax.to_datetime": {"tf": 2.449489742783178}, "atrax.Atrax.date_range": {"tf": 2.8284271247461903}, "atrax.Atrax.SSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MSE": {"tf": 2}, "atrax.Atrax.RMSE": {"tf": 2}, "atrax.Atrax.MAE": {"tf": 2}, "atrax.Atrax.MAPE": {"tf": 2}, "atrax.Atrax.SMAPE": {"tf": 2}, "atrax.core.customdatetime.to_datetime": {"tf": 2.449489742783178}, "atrax.core.customdatetime.date_range": {"tf": 2.8284271247461903}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 3.4641016151377544}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MSE": {"tf": 2}, "atrax.core.metrics.RMSE": {"tf": 2}, "atrax.core.metrics.MAE": {"tf": 2}, "atrax.core.metrics.MAPE": {"tf": 2}, "atrax.core.metrics.SMAPE": {"tf": 2}, "atrax.core.series.Series.__init__": {"tf": 3.1622776601683795}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 2.449489742783178}, "atrax.core.series.Series.rolling": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.8284271247461903}, "atrax.core.series.Series.quantile": {"tf": 2.6457513110645907}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}}, "df": 36}, "1": {"0": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}}, "df": 3}, "docs": {"atrax.Atrax.to_datetime": {"tf": 2.449489742783178}, "atrax.Atrax.date_range": {"tf": 2.8284271247461903}, "atrax.core.customdatetime.to_datetime": {"tf": 2.449489742783178}, "atrax.core.customdatetime.date_range": {"tf": 2.8284271247461903}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 6}, "1": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "2": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "3": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "4": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "7": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "9": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.cut": {"tf": 3}, "atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 3}, "atrax.core.dataset.DataSet.__init__": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.apply": {"tf": 1.7320508075688772}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 3.4641016151377544}, "atrax.core.series.Series.iloc": {"tf": 2.6457513110645907}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 4.123105625617661}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1.7320508075688772}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 2}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 3}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 4}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.7320508075688772}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 40, "/": {"1": {"docs": {}, "df": 0, "/": {"2": {"0": {"2": {"5": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "2": {"docs": {}, "df": 0, "/": {"2": {"0": {"2": {"5": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "3": {"docs": {}, "df": 0, "/": {"2": {"0": {"2": {"5": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}}, "2": {"0": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "2": {"3": {"docs": {"atrax.Atrax.to_datetime": {"tf": 2.449489742783178}, "atrax.Atrax.date_range": {"tf": 2.6457513110645907}, "atrax.core.customdatetime.to_datetime": {"tf": 2.449489742783178}, "atrax.core.customdatetime.date_range": {"tf": 2.6457513110645907}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}}, "df": 5}, "5": {"docs": {"atrax.core.series.Series.dt": {"tf": 1.7320508075688772}, "atrax.core.series.Series.to_datetime": {"tf": 2.449489742783178}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}}, "df": 2}, "1": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "3": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "5": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.core.series.Series.quantile": {"tf": 1}}, "df": 1}, "docs": {"atrax.Atrax.cut": {"tf": 3.872983346207417}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MSE": {"tf": 1.7320508075688772}, "atrax.Atrax.RMSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAPE": {"tf": 1.7320508075688772}, "atrax.Atrax.SMAPE": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 3.872983346207417}, "atrax.core.dataset.DataSet.__init__": {"tf": 2.23606797749979}, "atrax.core.metrics.SSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.RMSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAPE": {"tf": 1.7320508075688772}, "atrax.core.metrics.SMAPE": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 3.4641016151377544}, "atrax.core.series.Series.iloc": {"tf": 2.23606797749979}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 3.605551275463989}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1.7320508075688772}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.unique": {"tf": 2}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1.7320508075688772}, "atrax.core.series.Series.between": {"tf": 2}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 2.449489742783178}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 3}, "atrax.core.series.Series.rolling": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 4.69041575982343}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 48}, "3": {"0": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "2": {"7": {"3": {"8": {"0": {"9": {"5": {"2": {"3": {"8": {"0": {"9": {"5": {"2": {"4": {"docs": {"atrax.Atrax.MAPE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"5": {"docs": {"atrax.Atrax.MSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "9": {"docs": {"atrax.Atrax.cut": {"tf": 7.874007874011811}, "atrax.Atrax.date_range": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 2}, "atrax.core.cut.cut": {"tf": 7.874007874011811}, "atrax.core.dataset.DataSet.__init__": {"tf": 5.0990195135927845}, "atrax.core.series.Series.__init__": {"tf": 4.898979485566356}, "atrax.core.series.Series.iloc": {"tf": 4.242640687119285}, "atrax.core.series.Series.loc": {"tf": 3.7416573867739413}, "atrax.core.series.Series.dt": {"tf": 6.164414002968976}, "atrax.core.series.Series.values": {"tf": 2.8284271247461903}, "atrax.core.series.Series.name": {"tf": 3.4641016151377544}, "atrax.core.series.Series.to_datetime": {"tf": 3.1622776601683795}, "atrax.core.series.Series.astype": {"tf": 4.69041575982343}, "atrax.core.series.Series.cut": {"tf": 2.449489742783178}, "atrax.core.series.Series.rank": {"tf": 3.1622776601683795}, "atrax.core.series.Series.map": {"tf": 3.7416573867739413}}, "df": 16}, "docs": {"atrax.Atrax.cut": {"tf": 3}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.cut.cut": {"tf": 3}, "atrax.core.dataset.DataSet.__init__": {"tf": 2.23606797749979}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 2.6457513110645907}, "atrax.core.series.Series.iloc": {"tf": 2.449489742783178}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 3.605551275463989}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1.7320508075688772}, "atrax.core.series.Series.tail": {"tf": 2}, "atrax.core.series.Series.unique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 2.449489742783178}, "atrax.core.series.Series.rolling": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 2}, "atrax.core.series.Series.rank": {"tf": 3.7416573867739413}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 43}, "4": {"5": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 2.449489742783178}, "atrax.core.cut.cut": {"tf": 2.449489742783178}, "atrax.core.dataset.DataSet.__init__": {"tf": 2.23606797749979}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 2}, "atrax.core.series.Series.dt": {"tf": 2.23606797749979}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1.7320508075688772}, "atrax.core.series.Series.unique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.nunique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.isin": {"tf": 1.7320508075688772}, "atrax.core.series.Series.between": {"tf": 2}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rolling": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rank": {"tf": 3.872983346207417}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 2}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 27}, "5": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.percentile": {"tf": 1}}, "df": 3}, "7": {"8": {"7": {"8": {"7": {"8": {"7": {"8": {"7": {"8": {"7": {"8": {"7": {"8": {"7": {"docs": {"atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"1": {"1": {"3": {"8": {"8": {"3": {"0": {"0": {"8": {"4": {"1": {"8": {"9": {"8": {"docs": {"atrax.core.series.Series.std": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 2}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.series.Series.__init__": {"tf": 1.7320508075688772}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.7320508075688772}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 2.449489742783178}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 34}, "6": {"1": {"2": {"3": {"7": {"2": {"4": {"3": {"5": {"6": {"9": {"5": {"7": {"9": {"4": {"5": {"docs": {"atrax.Atrax.RMSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 6}, "7": {"0": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "5": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}}, "df": 3}, "docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 14}, "8": {"2": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 14}, "9": {"docs": {"atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"atrax": {"tf": 1.7320508075688772}, "atrax.Atrax": {"tf": 1.7320508075688772}, "atrax.Atrax.Series": {"tf": 1.7320508075688772}, "atrax.Atrax.DataSet": {"tf": 1.7320508075688772}, "atrax.Atrax.qcut": {"tf": 5.196152422706632}, "atrax.Atrax.cut": {"tf": 27.586228448267445}, "atrax.Atrax.to_datetime": {"tf": 9.273618495495704}, "atrax.Atrax.date_range": {"tf": 11}, "atrax.Atrax.SSE": {"tf": 11.704699910719626}, "atrax.Atrax.MSE": {"tf": 11.532562594670797}, "atrax.Atrax.RMSE": {"tf": 11.532562594670797}, "atrax.Atrax.MAE": {"tf": 11.532562594670797}, "atrax.Atrax.MAPE": {"tf": 11.532562594670797}, "atrax.Atrax.SMAPE": {"tf": 11.532562594670797}, "atrax.Atrax.read_csv": {"tf": 4.69041575982343}, "atrax.Atrax.get_db": {"tf": 2.8284271247461903}, "atrax.Atrax.read_sql": {"tf": 3.872983346207417}, "atrax.core": {"tf": 1.7320508075688772}, "atrax.core.customdatetime": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.to_datetime": {"tf": 9.273618495495704}, "atrax.core.customdatetime.date_range": {"tf": 11}, "atrax.core.customdatetime.try_parse_date": {"tf": 6.324555320336759}, "atrax.core.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 27.586228448267445}, "atrax.core.dataset": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.__init__": {"tf": 18.894443627691185}, "atrax.core.dataset.DataSet.index": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.loc": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.iloc": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.concat": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.data": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.columns": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.head": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.tail": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.shape": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.describe": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.info": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.apply": {"tf": 3.7416573867739413}, "atrax.core.dataset.DataSet.copy": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.groupby": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.sort": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.filter": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.drop": {"tf": 4.58257569495584}, "atrax.core.dataset.DataSet.rename": {"tf": 4.358898943540674}, "atrax.core.dataset.DataSet.reset_index": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.set_index": {"tf": 4.47213595499958}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.to_csv": {"tf": 2.8284271247461903}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.convert_column": {"tf": 3.4641016151377544}, "atrax.core.dataset.DataSet.astype": {"tf": 4.242640687119285}, "atrax.core.dataset.DataSet.merge": {"tf": 1.7320508075688772}, "atrax.core.group": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy": {"tf": 2.449489742783178}, "atrax.core.group.GroupBy.__init__": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.by": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.data": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.groups": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.agg": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.sum": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy.mean": {"tf": 1.7320508075688772}, "atrax.core.locators": {"tf": 1.7320508075688772}, "atrax.core.metrics": {"tf": 1.7320508075688772}, "atrax.core.metrics.SSE": {"tf": 11.704699910719626}, "atrax.core.metrics.MSE": {"tf": 11.532562594670797}, "atrax.core.metrics.RMSE": {"tf": 11.532562594670797}, "atrax.core.metrics.MAE": {"tf": 11.532562594670797}, "atrax.core.metrics.MAPE": {"tf": 11.532562594670797}, "atrax.core.metrics.SMAPE": {"tf": 11.532562594670797}, "atrax.core.qcut": {"tf": 1.7320508075688772}, "atrax.core.qcut.qcut": {"tf": 5.196152422706632}, "atrax.core.rolling": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.__init__": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.data": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.window": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.name": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.mean": {"tf": 1.7320508075688772}, "atrax.core.rolling.RollingSeries.sum": {"tf": 1.7320508075688772}, "atrax.core.series": {"tf": 1.7320508075688772}, "atrax.core.series.Series": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 21.400934559032695}, "atrax.core.series.Series.iloc": {"tf": 18.384776310850235}, "atrax.core.series.Series.loc": {"tf": 12.649110640673518}, "atrax.core.series.Series.dt": {"tf": 21.166010488516726}, "atrax.core.series.Series.values": {"tf": 12.041594578792296}, "atrax.core.series.Series.name": {"tf": 13.19090595827292}, "atrax.core.series.Series.data": {"tf": 1.7320508075688772}, "atrax.core.series.Series.index": {"tf": 1.7320508075688772}, "atrax.core.series.Series.dtype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.head": {"tf": 9.643650760992955}, "atrax.core.series.Series.tail": {"tf": 9.591663046625438}, "atrax.core.series.Series.unique": {"tf": 10.295630140987}, "atrax.core.series.Series.nunique": {"tf": 9.899494936611665}, "atrax.core.series.Series.isin": {"tf": 11.661903789690601}, "atrax.core.series.Series.between": {"tf": 11.135528725660043}, "atrax.core.series.Series.to_list": {"tf": 9.1104335791443}, "atrax.core.series.Series.apply": {"tf": 13.92838827718412}, "atrax.core.series.Series.to_datetime": {"tf": 11.489125293076057}, "atrax.core.series.Series.astype": {"tf": 16.522711641858304}, "atrax.core.series.Series.rolling": {"tf": 10.908712114635714}, "atrax.core.series.Series.cut": {"tf": 13.892443989449804}, "atrax.core.series.Series.rank": {"tf": 24.49489742783178}, "atrax.core.series.Series.map": {"tf": 13.490737563232042}, "atrax.core.series.Series.quantile": {"tf": 16.09347693943108}, "atrax.core.series.Series.percentile": {"tf": 10.344080432788601}, "atrax.core.series.Series.mean": {"tf": 9.746794344808963}, "atrax.core.series.Series.std": {"tf": 9.055385138137417}, "atrax.core.series.Series.var": {"tf": 10.246950765959598}, "atrax.core.series.Series.median": {"tf": 9.848857801796104}, "atrax.core.series.Series.mode": {"tf": 10.344080432788601}, "atrax.core.series.Series.min": {"tf": 10.099504938362077}, "atrax.core.series.Series.max": {"tf": 10.099504938362077}, "atrax.version": {"tf": 1.7320508075688772}}, "df": 115, "q": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 3.1622776601683795}}, "df": 3, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 2.449489742783178}, "atrax.core.series.Series.percentile": {"tf": 1}}, "df": 4, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 2.449489742783178}, "atrax.Atrax.date_range": {"tf": 2.449489742783178}, "atrax.core.customdatetime.to_datetime": {"tf": 2.449489742783178}, "atrax.core.customdatetime.date_range": {"tf": 2.449489742783178}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}}, "df": 6}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "b": {"docs": {"atrax.core.series.Series.__init__": {"tf": 2}, "atrax.core.series.Series.iloc": {"tf": 2.23606797749979}, "atrax.core.series.Series.loc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 6, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 2}}, "df": 13}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.cut": {"tf": 2.449489742783178}, "atrax.core.cut.cut": {"tf": 2.449489742783178}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"atrax.Atrax.cut": {"tf": 3.7416573867739413}, "atrax.core.cut.cut": {"tf": 3.7416573867739413}, "atrax.core.series.Series.cut": {"tf": 2}}, "df": 3}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.core.cut.cut": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.core.cut.cut": {"tf": 2.23606797749979}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.between": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"atrax.core.series.Series.between": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 4}}, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"atrax.core.series.Series.cut": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.to_dict": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"atrax.core.series.Series.apply": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.std": {"tf": 1}}, "df": 8}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.copy": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.rank": {"tf": 1.4142135623730951}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 2}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.7320508075688772}, "atrax.core.series.Series.dt": {"tf": 3.605551275463989}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 3.4641016151377544}, "atrax.Atrax.date_range": {"tf": 3.4641016151377544}, "atrax.core.customdatetime.to_datetime": {"tf": 3.4641016151377544}, "atrax.core.customdatetime.date_range": {"tf": 3.4641016151377544}, "atrax.core.customdatetime.try_parse_date": {"tf": 2.23606797749979}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 2.23606797749979}}, "df": 7}}}}}, "a": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.info": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}}, "df": 15, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.read_csv": {"tf": 1.7320508075688772}, "atrax.Atrax.read_sql": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.__init__": {"tf": 2.6457513110645907}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.rename": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.reset_index": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.set_index": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}}, "df": 21}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.get_db": {"tf": 1.7320508075688772}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.to_pandas": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 2}}, "df": 3}}, "s": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 2.23606797749979}, "atrax.core.series.Series.dt": {"tf": 4}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.23606797749979}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 2, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 2.449489742783178}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 2}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.23606797749979}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 15}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}}, "df": 2}}}}, "f": {"docs": {"atrax.core.series.Series.astype": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 2}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.7320508075688772}}, "df": 8}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 18, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1.7320508075688772}}, "df": 5, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 3.4641016151377544}, "atrax.core.series.Series.isin": {"tf": 1.7320508075688772}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}}, "df": 25}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}}, "df": 2, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 23}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_csv": {"tf": 2}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "p": {"docs": {"atrax.core.series.Series.percentile": {"tf": 2.449489742783178}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 38}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1.7320508075688772}}, "df": 1, "d": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"atrax.Atrax.read_csv": {"tf": 2}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.7320508075688772}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {"atrax.Atrax.SSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MSE": {"tf": 1.7320508075688772}, "atrax.Atrax.RMSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAPE": {"tf": 1.7320508075688772}, "atrax.Atrax.SMAPE": {"tf": 1.7320508075688772}, "atrax.core.metrics.SSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.RMSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAPE": {"tf": 1.7320508075688772}, "atrax.core.metrics.SMAPE": {"tf": 1.7320508075688772}}, "df": 12, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 12}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}}, "df": 5}, "s": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}}, "df": 3}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.dt": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.23606797749979}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1.7320508075688772}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 20}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.date_range": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 2}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.percentile": {"tf": 2}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.rolling": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "g": {"2": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.astype": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 2.6457513110645907}, "atrax.core.series.Series.percentile": {"tf": 1.7320508075688772}, "atrax.core.series.Series.mean": {"tf": 1.7320508075688772}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1.7320508075688772}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 2}, "atrax.core.series.Series.max": {"tf": 2}}, "df": 13, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.cut": {"tf": 2.6457513110645907}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MSE": {"tf": 1.7320508075688772}, "atrax.Atrax.RMSE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAE": {"tf": 1.7320508075688772}, "atrax.Atrax.MAPE": {"tf": 1.7320508075688772}, "atrax.Atrax.SMAPE": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 2.6457513110645907}, "atrax.core.metrics.SSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.RMSE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAE": {"tf": 1.7320508075688772}, "atrax.core.metrics.MAPE": {"tf": 1.7320508075688772}, "atrax.core.metrics.SMAPE": {"tf": 1.7320508075688772}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.unique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 2.449489742783178}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}}, "df": 28}}}}, "r": {"docs": {"atrax.core.series.Series.var": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.var": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.to_datetime": {"tf": 2}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 2}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.7320508075688772}, "atrax.core.series.Series.to_list": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}}, "df": 33, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 4}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.series.Series.loc": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.cut": {"tf": 3.1622776601683795}, "atrax.core.cut.cut": {"tf": 3.1622776601683795}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 2}}, "df": 7}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}}, "df": 3}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"atrax.core.series.Series.apply": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.Atrax.cut": {"tf": 2.449489742783178}, "atrax.core.cut.cut": {"tf": 2.449489742783178}, "atrax.core.series.Series.cut": {"tf": 2}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.core.cut.cut": {"tf": 2.23606797749979}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 4}}}, "c": {"docs": {"atrax.core.series.Series.loc": {"tf": 1.7320508075688772}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {"atrax.core.series.Series.quantile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}}, "df": 2}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1.7320508075688772}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 2}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.apply": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.groupby": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.7320508075688772}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}}, "df": 29, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "f": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.cut": {"tf": 2}, "atrax.Atrax.to_datetime": {"tf": 1.7320508075688772}, "atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 2}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 2}, "atrax.core.series.Series.var": {"tf": 2}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}}, "df": 45}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 2}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 2}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 12}, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 5}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1.7320508075688772}}, "df": 12, "s": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 1}}}, "a": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 2.23606797749979}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 2.449489742783178}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 2.23606797749979}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 2}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 2}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 2.23606797749979}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1.7320508075688772}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 2.23606797749979}}, "df": 45, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 17}}}, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}}, "df": 3}, "g": {"docs": {"atrax.core.series.Series.map": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 12}}}, "n": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 3, "d": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 19}}, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.7320508075688772}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 30, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.astype": {"tf": 1.7320508075688772}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.rank": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}, "t": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.series.Series.__init__": {"tf": 1.7320508075688772}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}}, "df": 22}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.core.cut.cut": {"tf": 2}}, "df": 2, "s": {"docs": {"atrax.Atrax.cut": {"tf": 2.449489742783178}, "atrax.core.cut.cut": {"tf": 2.449489742783178}}, "df": 2}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 2}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.apply": {"tf": 1}}, "df": 1}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 2}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.rank": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2, "h": {"docs": {"atrax.core.series.Series.quantile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.cut": {"tf": 3.1622776601683795}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 2}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 3.1622776601683795}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.head": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.tail": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.shape": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.describe": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.info": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.rename": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.set_index": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.head": {"tf": 2}, "atrax.core.series.Series.tail": {"tf": 2}, "atrax.core.series.Series.unique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.nunique": {"tf": 1.7320508075688772}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 2.23606797749979}, "atrax.core.series.Series.to_list": {"tf": 1.7320508075688772}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 2}, "atrax.core.series.Series.astype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rolling": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 2}, "atrax.core.series.Series.mean": {"tf": 2}, "atrax.core.series.Series.std": {"tf": 2.449489742783178}, "atrax.core.series.Series.var": {"tf": 2.23606797749979}, "atrax.core.series.Series.median": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 1.7320508075688772}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 72, "m": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}}, "df": 4}, "n": {"docs": {}, "df": 0, "k": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {"atrax.Atrax.qcut": {"tf": 1.7320508075688772}, "atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.Atrax.to_datetime": {"tf": 2}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1.7320508075688772}, "atrax.Atrax.read_sql": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.to_datetime": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 2}, "atrax.core.series.Series.to_datetime": {"tf": 2.6457513110645907}, "atrax.core.series.Series.astype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 2.23606797749979}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 1}}, "df": 39}, "i": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.core.cut.cut": {"tf": 2.23606797749979}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3, "s": {"docs": {"atrax.core.series.Series.cut": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1.7320508075688772}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 2.6457513110645907}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.7320508075688772}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.23606797749979}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1.7320508075688772}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 48}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 2.23606797749979}, "atrax.Atrax.MSE": {"tf": 2.23606797749979}, "atrax.Atrax.RMSE": {"tf": 2.23606797749979}, "atrax.Atrax.MAE": {"tf": 2.23606797749979}, "atrax.Atrax.MAPE": {"tf": 2.23606797749979}, "atrax.Atrax.SMAPE": {"tf": 2.23606797749979}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 2.23606797749979}, "atrax.core.metrics.MSE": {"tf": 2.23606797749979}, "atrax.core.metrics.RMSE": {"tf": 2.23606797749979}, "atrax.core.metrics.MAE": {"tf": 2.23606797749979}, "atrax.core.metrics.MAPE": {"tf": 2.23606797749979}, "atrax.core.metrics.SMAPE": {"tf": 2.23606797749979}, "atrax.core.series.Series.__init__": {"tf": 2.449489742783178}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 2}, "atrax.core.series.Series.rank": {"tf": 2.449489742783178}}, "df": 20}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.shape": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 2}}, "df": 3, "s": {"docs": {"atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.series.Series.tail": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.dt": {"tf": 1.4142135623730951}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 2}}}, "i": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 2}}, "df": 2, "n": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 15, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1.4142135623730951}, "atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 5}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.7320508075688772}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 2.23606797749979}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rank": {"tf": 2}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 23, "o": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"atrax.core.series.Series.index": {"tf": 1}}, "df": 1}}}}}, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.between": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.7320508075688772}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.dataset.DataSet.info": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 2.449489742783178}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}}, "df": 16, "i": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.isin": {"tf": 1.4142135623730951}}, "df": 1}}}, "f": {"docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.rename": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.4142135623730951}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 15}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}}, "df": 21}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 6}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.series.Series.iloc": {"tf": 2.23606797749979}}, "df": 1}}}, "d": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.8284271247461903}}, "df": 1}, "t": {"docs": {"atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 2}}, "n": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.7320508075688772}, "atrax.core.series.Series.tail": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}}, "df": 7, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 13, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1.7320508075688772}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.nunique": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}}, "df": 2, "n": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 3, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 13}}, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 2}}, "p": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 12}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 3.3166247903554}, "atrax.core.series.Series.iloc": {"tf": 2.23606797749979}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 2}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1.7320508075688772}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.23606797749979}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.astype": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.rename": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 16}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {"atrax.core.series.Series.__init__": {"tf": 2}, "atrax.core.series.Series.iloc": {"tf": 2.23606797749979}, "atrax.core.series.Series.loc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 6, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}}, "df": 2}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_dict": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.to_pandas": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}, "d": {"docs": {"atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}}, "df": 6}}}}}}}, "n": {"docs": {"atrax.Atrax.get_db": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.get_db": {"tf": 2}, "atrax.Atrax.read_sql": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"1": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 2.449489742783178}}, "df": 1}, "2": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 2.449489742783178}}, "df": 1}, "3": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "4": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}, "docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1, "n": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 2.23606797749979}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.astype": {"tf": 1}}, "df": 11, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.rename": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.astype": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}}, "df": 9}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.copy": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}}, "df": 8}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.mode": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.cut": {"tf": 2.8284271247461903}, "atrax.core.cut.cut": {"tf": 2.8284271247461903}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}}, "df": 14, "s": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.astype": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"atrax.Atrax.read_csv": {"tf": 2}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.4142135623730951}}, "df": 2}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.group.GroupBy": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.columns": {"tf": 1}, "atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.copy": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.series.Series.data": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 22, "s": {"docs": {"atrax.Atrax.qcut": {"tf": 1}, "atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.Atrax.read_csv": {"tf": 1}, "atrax.Atrax.get_db": {"tf": 1}, "atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.qcut.qcut": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 58}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 2}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.dataset.DataSet.reset_index": {"tf": 1.4142135623730951}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 1, "d": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 1, "d": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.index": {"tf": 1}}, "df": 5}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.series.Series.cut": {"tf": 1}}, "df": 1}}}, "k": {"docs": {"atrax.core.series.Series.rank": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"atrax.core.series.Series.rank": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.rank": {"tf": 3.3166247903554}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}}, "df": 2}}, "w": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 2}, "atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 3, "s": {"docs": {"atrax.core.dataset.DataSet.head": {"tf": 1}, "atrax.core.dataset.DataSet.tail": {"tf": 1}, "atrax.core.dataset.DataSet.shape": {"tf": 1}, "atrax.core.dataset.DataSet.info": {"tf": 1}, "atrax.core.dataset.DataSet.drop": {"tf": 1}}, "df": 5}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.rolling": {"tf": 2.8284271247461903}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.core.cut.cut": {"tf": 2}}, "df": 2}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 2, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.percentile": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.iloc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1.4142135623730951}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.7320508075688772}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 48, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1}, "atrax.core.series.Series.name": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}}, "df": 2}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_csv": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1.7320508075688772}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 8}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1.7320508075688772}, "atrax.core.series.Series.std": {"tf": 1}}, "df": 4, "s": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1.7320508075688772}, "atrax.core.series.Series.tail": {"tf": 1.7320508075688772}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 5}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 11, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.core.series.Series.rolling": {"tf": 2}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"atrax.core.series.Series.cut": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.between": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 1, "s": {"docs": {"atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.6457513110645907}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.449489742783178}}, "df": 1}}}}}}}, "s": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 2.6457513110645907}, "atrax.core.series.Series.iloc": {"tf": 2.449489742783178}, "atrax.core.series.Series.loc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.values": {"tf": 1.7320508075688772}, "atrax.core.series.Series.name": {"tf": 2}, "atrax.core.series.Series.head": {"tf": 1.4142135623730951}, "atrax.core.series.Series.tail": {"tf": 1.4142135623730951}, "atrax.core.series.Series.unique": {"tf": 2}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 1.4142135623730951}, "atrax.core.series.Series.between": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_list": {"tf": 1.4142135623730951}, "atrax.core.series.Series.apply": {"tf": 1.7320508075688772}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 2.449489742783178}, "atrax.core.series.Series.rolling": {"tf": 2}, "atrax.core.series.Series.cut": {"tf": 2}, "atrax.core.series.Series.rank": {"tf": 4.47213595499958}, "atrax.core.series.Series.map": {"tf": 2}, "atrax.core.series.Series.quantile": {"tf": 2.449489742783178}, "atrax.core.series.Series.percentile": {"tf": 1.7320508075688772}, "atrax.core.series.Series.mean": {"tf": 1.4142135623730951}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 2}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 31, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.core.cut.cut": {"tf": 2.23606797749979}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 2.6457513110645907}, "atrax.core.series.Series.iloc": {"tf": 1.7320508075688772}, "atrax.core.series.Series.loc": {"tf": 1.4142135623730951}, "atrax.core.series.Series.dt": {"tf": 1}, "atrax.core.series.Series.values": {"tf": 1.4142135623730951}, "atrax.core.series.Series.name": {"tf": 1.7320508075688772}, "atrax.core.series.Series.dtype": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 2}, "atrax.core.series.Series.tail": {"tf": 2}, "atrax.core.series.Series.unique": {"tf": 2}, "atrax.core.series.Series.nunique": {"tf": 1.4142135623730951}, "atrax.core.series.Series.isin": {"tf": 2}, "atrax.core.series.Series.between": {"tf": 2}, "atrax.core.series.Series.to_list": {"tf": 1.7320508075688772}, "atrax.core.series.Series.apply": {"tf": 2}, "atrax.core.series.Series.to_datetime": {"tf": 2.449489742783178}, "atrax.core.series.Series.astype": {"tf": 3.4641016151377544}, "atrax.core.series.Series.rolling": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 2}, "atrax.core.series.Series.rank": {"tf": 2.8284271247461903}, "atrax.core.series.Series.map": {"tf": 2}, "atrax.core.series.Series.quantile": {"tf": 2}, "atrax.core.series.Series.percentile": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 1.7320508075688772}, "atrax.core.series.Series.std": {"tf": 1.7320508075688772}, "atrax.core.series.Series.var": {"tf": 1.4142135623730951}, "atrax.core.series.Series.median": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mode": {"tf": 1.4142135623730951}, "atrax.core.series.Series.min": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 30}}}}, "x": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.dt": {"tf": 3.605551275463989}}, "df": 1, "s": {"docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.core.cut.cut": {"tf": 2}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.Atrax.date_range": {"tf": 2}, "atrax.Atrax.read_csv": {"tf": 2}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.Atrax.read_sql": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 2}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.dataset.DataSet.groupby": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 18, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.to_datetime": {"tf": 2}, "atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.Atrax.read_csv": {"tf": 2}, "atrax.Atrax.get_db": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 2}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 8, "s": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.to_datetime": {"tf": 1.4142135623730951}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "d": {"docs": {"atrax.core.series.Series.std": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.to_datetime": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}}, "df": 3}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}}, "df": 2}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.rolling": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}}, "df": 7}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}}, "df": 4, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.info": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.apply": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.apply": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "l": {"docs": {"atrax.Atrax.read_sql": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"3": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SSE": {"tf": 1.4142135623730951}}, "df": 2}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.shape": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1, "d": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.Atrax.to_datetime": {"tf": 1}, "atrax.Atrax.date_range": {"tf": 1}, "atrax.Atrax.SSE": {"tf": 1}, "atrax.Atrax.MSE": {"tf": 1}, "atrax.Atrax.RMSE": {"tf": 1}, "atrax.Atrax.MAE": {"tf": 1}, "atrax.Atrax.MAPE": {"tf": 1}, "atrax.Atrax.SMAPE": {"tf": 1}, "atrax.core.customdatetime.to_datetime": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.dataset.DataSet.__init__": {"tf": 1}, "atrax.core.metrics.SSE": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1}, "atrax.core.metrics.RMSE": {"tf": 1}, "atrax.core.metrics.MAE": {"tf": 1}, "atrax.core.metrics.MAPE": {"tf": 1}, "atrax.core.metrics.SMAPE": {"tf": 1}, "atrax.core.series.Series.head": {"tf": 1}, "atrax.core.series.Series.tail": {"tf": 1}, "atrax.core.series.Series.unique": {"tf": 1}, "atrax.core.series.Series.nunique": {"tf": 1}, "atrax.core.series.Series.isin": {"tf": 1}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.to_list": {"tf": 1}, "atrax.core.series.Series.apply": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}, "atrax.core.series.Series.astype": {"tf": 1}, "atrax.core.series.Series.rolling": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}, "atrax.core.series.Series.quantile": {"tf": 1}, "atrax.core.series.Series.percentile": {"tf": 1}, "atrax.core.series.Series.mean": {"tf": 1}, "atrax.core.series.Series.std": {"tf": 1}, "atrax.core.series.Series.var": {"tf": 1}, "atrax.core.series.Series.median": {"tf": 1}, "atrax.core.series.Series.mode": {"tf": 1}, "atrax.core.series.Series.min": {"tf": 1}, "atrax.core.series.Series.max": {"tf": 1}}, "df": 43}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.read_sql": {"tf": 1}, "atrax.core.customdatetime.try_parse_date": {"tf": 1}, "atrax.core.dataset.DataSet.convert_column": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.cut": {"tf": 2.23606797749979}, "atrax.core.cut.cut": {"tf": 2.23606797749979}, "atrax.core.series.Series.between": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1.4142135623730951}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.series.Series.values": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.unique": {"tf": 2.449489742783178}, "atrax.core.series.Series.nunique": {"tf": 2}}, "df": 2}}}}}}, "h": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "w": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.iloc": {"tf": 1}, "atrax.core.series.Series.loc": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 5}, "u": {"docs": {}, "df": 0, "r": {"docs": {"atrax.Atrax.date_range": {"tf": 1}, "atrax.core.customdatetime.date_range": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}, "atrax.core.series.Series.cut": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"atrax.Atrax.cut": {"tf": 2.6457513110645907}, "atrax.core.cut.cut": {"tf": 2.6457513110645907}, "atrax.core.series.Series.cut": {"tf": 2.23606797749979}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.23606797749979}, "atrax.core.series.Series.head": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {"atrax.core.series.Series.astype": {"tf": 1}}, "df": 1, "t": {"docs": {"atrax.Atrax.cut": {"tf": 6.928203230275509}, "atrax.Atrax.to_datetime": {"tf": 2.449489742783178}, "atrax.Atrax.date_range": {"tf": 2.449489742783178}, "atrax.Atrax.SSE": {"tf": 3.4641016151377544}, "atrax.Atrax.MSE": {"tf": 3.4641016151377544}, "atrax.Atrax.RMSE": {"tf": 3.4641016151377544}, "atrax.Atrax.MAE": {"tf": 3.4641016151377544}, "atrax.Atrax.MAPE": {"tf": 3.4641016151377544}, "atrax.Atrax.SMAPE": {"tf": 3.4641016151377544}, "atrax.core.customdatetime.to_datetime": {"tf": 2.449489742783178}, "atrax.core.customdatetime.date_range": {"tf": 2.449489742783178}, "atrax.core.customdatetime.try_parse_date": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 6.928203230275509}, "atrax.core.dataset.DataSet.__init__": {"tf": 4.242640687119285}, "atrax.core.metrics.SSE": {"tf": 3.4641016151377544}, "atrax.core.metrics.MSE": {"tf": 3.4641016151377544}, "atrax.core.metrics.RMSE": {"tf": 3.4641016151377544}, "atrax.core.metrics.MAE": {"tf": 3.4641016151377544}, "atrax.core.metrics.MAPE": {"tf": 3.4641016151377544}, "atrax.core.metrics.SMAPE": {"tf": 3.4641016151377544}, "atrax.core.series.Series.__init__": {"tf": 4.898979485566356}, "atrax.core.series.Series.iloc": {"tf": 4.58257569495584}, "atrax.core.series.Series.loc": {"tf": 3.4641016151377544}, "atrax.core.series.Series.dt": {"tf": 6.244997998398398}, "atrax.core.series.Series.values": {"tf": 3.4641016151377544}, "atrax.core.series.Series.name": {"tf": 3.872983346207417}, "atrax.core.series.Series.head": {"tf": 2.449489742783178}, "atrax.core.series.Series.tail": {"tf": 2.449489742783178}, "atrax.core.series.Series.unique": {"tf": 3}, "atrax.core.series.Series.nunique": {"tf": 3}, "atrax.core.series.Series.isin": {"tf": 3.4641016151377544}, "atrax.core.series.Series.between": {"tf": 3}, "atrax.core.series.Series.to_list": {"tf": 3}, "atrax.core.series.Series.apply": {"tf": 4.58257569495584}, "atrax.core.series.Series.to_datetime": {"tf": 3}, "atrax.core.series.Series.astype": {"tf": 5.196152422706632}, "atrax.core.series.Series.rolling": {"tf": 3}, "atrax.core.series.Series.cut": {"tf": 3}, "atrax.core.series.Series.rank": {"tf": 6.708203932499369}, "atrax.core.series.Series.map": {"tf": 3.4641016151377544}, "atrax.core.series.Series.quantile": {"tf": 5.196152422706632}, "atrax.core.series.Series.percentile": {"tf": 3}, "atrax.core.series.Series.mean": {"tf": 3}, "atrax.core.series.Series.std": {"tf": 2.449489742783178}, "atrax.core.series.Series.var": {"tf": 3}, "atrax.core.series.Series.median": {"tf": 3}, "atrax.core.series.Series.mode": {"tf": 3}, "atrax.core.series.Series.min": {"tf": 3}, "atrax.core.series.Series.max": {"tf": 3}}, "df": 49}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.date_range": {"tf": 1.4142135623730951}, "atrax.core.customdatetime.date_range": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "t": {"docs": {"atrax.Atrax.get_db": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.sum": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}}, "df": 4, "b": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1.4142135623730951}, "atrax.core.group.GroupBy": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.dataset.DataSet.to_csv": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "m": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.Atrax.cut": {"tf": 1.7320508075688772}, "atrax.core.cut.cut": {"tf": 1.7320508075688772}, "atrax.core.series.Series.cut": {"tf": 2}}, "df": 3}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.core.series.Series.median": {"tf": 2.23606797749979}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.Atrax.RMSE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.Atrax.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.group.GroupBy.mean": {"tf": 1}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.RMSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.SMAPE": {"tf": 1.4142135623730951}, "atrax.core.series.Series.rolling": {"tf": 1.4142135623730951}, "atrax.core.series.Series.mean": {"tf": 2.23606797749979}}, "df": 15, "s": {"docs": {"atrax.core.series.Series.__init__": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 2.449489742783178}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"atrax.core.series.Series.isin": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 2}, "atrax.core.cut.cut": {"tf": 2}}, "df": 2}}}}, "n": {"docs": {"atrax.Atrax.date_range": {"tf": 1.7320508075688772}, "atrax.core.customdatetime.date_range": {"tf": 1.7320508075688772}, "atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}, "atrax.core.series.Series.min": {"tf": 1.7320508075688772}}, "df": 6, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.series.Series.min": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.series.Series.mode": {"tf": 2}}, "df": 1, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.cut": {"tf": 1}, "atrax.core.cut.cut": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.dataset.DataSet.drop": {"tf": 1}, "atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.reset_index": {"tf": 1}, "atrax.core.dataset.DataSet.set_index": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.dataset.DataSet.groupby": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"atrax.core.series.Series.dt": {"tf": 2.23606797749979}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"atrax.core.series.Series.mode": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MSE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MSE": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "e": {"docs": {"atrax.Atrax.MAE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAE": {"tf": 1.4142135623730951}}, "df": 2}, "p": {"docs": {"atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {"atrax.Atrax.MAPE": {"tf": 1.4142135623730951}, "atrax.core.metrics.MAPE": {"tf": 1.4142135623730951}}, "df": 2}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.core.dataset.DataSet.rename": {"tf": 1}, "atrax.core.dataset.DataSet.astype": {"tf": 1}, "atrax.core.series.Series.map": {"tf": 2}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"atrax.core.series.Series.map": {"tf": 2}}, "df": 1}}}}, "x": {"docs": {"atrax.core.dataset.DataSet.describe": {"tf": 1}, "atrax.core.group.GroupBy": {"tf": 1}, "atrax.core.series.Series.rank": {"tf": 1.4142135623730951}, "atrax.core.series.Series.max": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"atrax.core.series.Series.max": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"atrax.core.customdatetime.try_parse_date": {"tf": 1}}, "df": 1}}}}}}}, "/": {"docs": {}, "df": 0, "%": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "%": {"docs": {}, "df": 0, "y": {"docs": {"atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"atrax.Atrax.SSE": {"tf": 2.449489742783178}, "atrax.Atrax.MSE": {"tf": 2.449489742783178}, "atrax.Atrax.RMSE": {"tf": 2.449489742783178}, "atrax.Atrax.MAE": {"tf": 2.449489742783178}, "atrax.Atrax.MAPE": {"tf": 2.449489742783178}, "atrax.Atrax.SMAPE": {"tf": 2.449489742783178}, "atrax.core.metrics.SSE": {"tf": 2.449489742783178}, "atrax.core.metrics.MSE": {"tf": 2.449489742783178}, "atrax.core.metrics.RMSE": {"tf": 2.449489742783178}, "atrax.core.metrics.MAE": {"tf": 2.449489742783178}, "atrax.core.metrics.MAPE": {"tf": 2.449489742783178}, "atrax.core.metrics.SMAPE": {"tf": 2.449489742783178}, "atrax.core.series.Series.to_datetime": {"tf": 1}}, "df": 13, "o": {"docs": {}, "df": 0, "u": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "g": {"docs": {"atrax.Atrax.cut": {"tf": 1.4142135623730951}, "atrax.core.cut.cut": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"atrax.core.series.Series.dt": {"tf": 1.7320508075688772}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"atrax.Atrax.read_csv": {"tf": 1}}, "df": 1}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"atrax.core.group.GroupBy": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {"atrax.core.series.Series.apply": {"tf": 2}}, "df": 1}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();